import{u as e,s as t,_ as s,p as o,v as i,c as a,E as l,Q as r,h as n,w as d}from"./backend-ai-console-08beed35.js";let p=class extends e{constructor(){super(...arguments),this.role="select"}firstUpdated(e){super.firstUpdated(e),this.listeners.push(l(this.$slot,"slotchange",this.updateOptions.bind(this),{passive:!0})),this.updateOptions()}updateOptions(){if(null==this.$formElement)return;const e=this.$formElement,t=this.$slot.assignedNodes().filter(e=>1===e.nodeType).filter(e=>"option"===(e.tagName||"").toLowerCase()).map(e=>e.cloneNode(!0));if(0===t.length)return;const s=e.value;r(e);for(const s of t)e.options.add(s);const o=""===s?this.initialValue||this.value:s;e.value!==o&&(e.value=o),this.value!==o&&(this.value=o)}renderFormElement(){return n` <select id="${this.formElementId}" .value="${this.value}" ?required="${this.required}" ?disabled="${this.disabled}" ?readonly="${this.readonly}" name="${d(this.name)}" autocomplete="${d(this.autocomplete)}" tabindex="${this.disabled?-1:0}"></select> <svg id="arrow" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 25" preserveAspectRatio="none"> <polygon points="0,0 50,0 25,25"/> </svg> `}};p.styles=[...e.styles,t("#arrow{fill:var(--_input-state-color);height:var(--select-arrow-height,.5rem);position:absolute;top:50%;right:0;transform:translate(-100%,-50%)}::slotted(option){display:none}:host(:not([dirty])) ::slotted(select){opacity:0}")],s([o({type:String,reflect:!0}),i("design:type",String)],p.prototype,"role",void 0),p=s([a("wl-select")],p);
