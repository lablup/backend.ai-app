{"version":3,"file":"static/js/150.aeb9622e.chunk.js","mappings":"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","sources":["helper/graphql-transformer.ts","RelayEnvironment.ts","components/DefaultProviders.tsx","components/ResourceNumber.tsx","components/__generated__/ResourcePresetSelectQuery.graphql.ts","BAICard.tsx","components/DatePickerISO.tsx","components/EnvVarFormList.tsx","components/PortSelectFormItem.tsx","components/ResourcePresetSelect.tsx","components/ResourceAllocationFormItems.tsx","components/VFolderTable.tsx","components/VFolderTableFormItem.tsx","pages/SessionLauncherPage.tsx"],"sourcesContent":["import { parse, print, visit } from 'graphql';\n\n// Delete nodes in enter\n// Remove unnecessary arguments or directives in leave\nexport function manipulateGraphQLQueryWithClientDirectives(\n  query: string,\n  variables: any = {},\n  isCompatibleWith: (version: string) => boolean,\n) {\n  const ast = parse(query);\n  let newAst = visit(ast, {\n    Field: {\n      enter(node) {\n        if (\n          node?.directives?.find((directive) => {\n            const directiveName = directive.name.value;\n            const firstArgName = directive.arguments?.[0].name.value;\n            // @ts-ignore\n            const firstArgValue = directive.arguments?.[0].value?.value;\n            const arg = directive.arguments?.[0];\n\n            if (directiveName === 'since' && firstArgName === 'version') {\n              if (isCompatibleWith(firstArgValue)) {\n                return true;\n              }\n            } else if (\n              directiveName === 'deprecatedSince' &&\n              firstArgName === 'version'\n            ) {\n              const version =\n                arg?.value.kind === 'StringValue'\n                  ? arg?.value.value\n                  : // @ts-ignore\n                    variables[arg?.value.name.value];\n\n              if (!isCompatibleWith(version)) {\n                return true;\n              }\n            } else if (\n              directiveName === 'skipOnClient' &&\n              firstArgName === 'if'\n            ) {\n              if (arg?.value.kind === 'BooleanValue' && arg.value.value) {\n                return true;\n              }\n\n              if (\n                arg?.value.kind === 'Variable' &&\n                variables[arg.value.name.value]\n              ) {\n                return true;\n              }\n            }\n            return false;\n          })\n        ) {\n          return null;\n        }\n      },\n      leave(node) {\n        // when field has a empty selectionSet, delete it\n        if (\n          node.selectionSet &&\n          node.selectionSet.kind === 'SelectionSet' &&\n          node.selectionSet.selections?.length === 0\n        ) {\n          return null;\n        }\n      },\n    },\n    Directive: {\n      // delete all onClient directives\n      leave(directive) {\n        const directiveName = directive.name.value;\n        if (\n          ['since', 'deprecatedSince', 'skipOnClient'].includes(directiveName)\n        ) {\n          return null;\n        }\n      },\n    },\n  });\n\n  // count used variables\n  const usedVariables: {\n    [key: string]: number;\n  } = {};\n  visit(newAst, {\n    Variable(node) {\n      usedVariables[node.name.value] =\n        (usedVariables[node.name.value] || 0) + 1;\n    },\n  });\n\n  // delete unused variables\n  newAst = visit(newAst, {\n    VariableDefinition: {\n      enter(variableDefinition) {\n        if (usedVariables[variableDefinition.variable.name.value] <= 1) {\n          return null;\n        }\n      },\n    },\n  });\n\n  return print(newAst);\n}\n","// import { createClient } from \"graphql-ws\";\nimport { manipulateGraphQLQueryWithClientDirectives } from './helper/graphql-transformer';\nimport {\n  Environment,\n  Network,\n  RecordSource,\n  Store,\n  FetchFunction,\n  SubscribeFunction,\n  RelayFeatureFlags,\n} from 'relay-runtime';\n\nRelayFeatureFlags.ENABLE_RELAY_RESOLVERS = true;\n\nconst fetchFn: FetchFunction = async (\n  request,\n  variables,\n  // cacheConfig,\n  // uploadables\n) => {\n  //@ts-ignore\n  if (globalThis.backendaiclient === undefined) {\n    // If globalThis.backendaiclient is not defined, wait for the backend-ai-connected event.\n    await new Promise((resolve) => {\n      const onBackendAIConnected = () => {\n        // When the backend-ai-connected event occurs, remove the event listener and execute the function.\n        document.removeEventListener(\n          'backend-ai-connected',\n          onBackendAIConnected,\n        );\n        resolve(undefined);\n      };\n      document.addEventListener('backend-ai-connected', onBackendAIConnected);\n    });\n  }\n\n  const transformedQuery = manipulateGraphQLQueryWithClientDirectives(\n    request.text || '',\n    variables,\n    (version) => {\n      // @ts-ignore\n      return !globalThis.backendaiclient?.isManagerVersionCompatibleWith(\n        version,\n      );\n    },\n  );\n\n  const reqBody = {\n    query: transformedQuery,\n    variables: variables,\n  };\n\n  //@ts-ignore\n  const reqInfo = globalThis.backendaiclient?.newSignedRequest(\n    'POST',\n    '/admin/gql',\n    reqBody,\n  );\n\n  const result =\n    //@ts-ignore\n    (await globalThis.backendaiclient\n      ?._wrapWithPromise(reqInfo, false, null, 10000, 0)\n      .catch((err: any) => {\n        // console.log(err);\n      })) || {};\n\n  return result;\n};\n\nlet subscribeFn: SubscribeFunction;\n\n// if (typeof window !== \"undefined\") {\n//   // We only want to setup subscriptions if we are on the client.\n//   const subscriptionsClient = createClient({\n//     url: WEBSOCKET_ENDPOINT,\n//   });\n\n//   subscribeFn = (request, variables) => {\n//     // To understand why we return Observable.create<any>,\n//     // please see: https://github.com/enisdenjo/graphql-ws/issues/316#issuecomment-1047605774\n//     return Observable.create<any>((sink) => {\n//       if (!request.text) {\n//         return sink.error(new Error(\"Operation text cannot be empty\"));\n//       }\n\n//       return subscriptionsClient.subscribe(\n//         {\n//           operationName: request.name,\n//           query: request.text,\n//           variables,\n//         },\n//         sink\n//       );\n//     });\n//   };\n// }\n\nfunction createRelayEnvironment() {\n  return new Environment({\n    network: Network.create(fetchFn, subscribeFn),\n    store: new Store(new RecordSource()),\n  });\n}\n\nexport const RelayEnvironment = createRelayEnvironment();\n","import { RelayEnvironment } from '../RelayEnvironment';\n// @ts-ignore\nimport rawFixAntCss from '../fix_antd.css?raw';\nimport { useCustomThemeConfig } from '../helper/customThemeConfig';\nimport { ReactWebComponentProps } from '../helper/react-to-webcomponent';\nimport { StyleProvider, createCache } from '@ant-design/cssinjs';\nimport { App, ConfigProvider } from 'antd';\nimport en_US from 'antd/locale/en_US';\nimport ko_KR from 'antd/locale/ko_KR';\nimport dayjs from 'dayjs';\nimport 'dayjs/locale/ko';\nimport localeData from 'dayjs/plugin/localeData';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport timezone from 'dayjs/plugin/timezone';\nimport utc from 'dayjs/plugin/utc';\nimport weekday from 'dayjs/plugin/weekday';\nimport i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport React, {\n  Suspense,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useTranslation, initReactI18next } from 'react-i18next';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { RelayEnvironmentProvider } from 'react-relay';\nimport { BrowserRouter, useNavigate } from 'react-router-dom';\nimport { QueryParamProvider } from 'use-query-params';\nimport { ReactRouter6Adapter } from 'use-query-params/adapters/react-router-6';\n\ndayjs.extend(weekday);\ndayjs.extend(localeData);\ndayjs.extend(localizedFormat);\ndayjs.extend(relativeTime);\ndayjs.extend(utc);\ndayjs.extend(timezone);\n\ninterface WebComponentContextType {\n  value?: ReactWebComponentProps['value'];\n  dispatchEvent: ReactWebComponentProps['dispatchEvent'];\n  moveTo: (\n    path: string,\n    params?: {\n      [key in string]?: boolean | string | number;\n    },\n  ) => void;\n}\n\nconst WebComponentContext = React.createContext<WebComponentContextType>(null!);\nconst ShadowRootContext = React.createContext<ShadowRoot>(null!);\nexport const useShadowRoot = () => React.useContext(ShadowRootContext);\nexport const useWebComponentInfo = () => React.useContext(WebComponentContext);\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      suspense: true,\n      refetchOnWindowFocus: false,\n      retry: false,\n    },\n  },\n});\n\nexport interface DefaultProvidersProps extends ReactWebComponentProps {\n  children?: React.ReactNode;\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .use(Backend)\n  .init({\n    backend: {\n      loadPath: '/resources/i18n/{{lng}}.json',\n    },\n    //@ts-ignore\n    lng: globalThis?.backendaioptions?.get('current_language') || 'en',\n    fallbackLng: 'en',\n    interpolation: {\n      escapeValue: false, // react already safes from xss => https://www.i18next.com/translation-function/interpolation#unescape\n    },\n    react: {\n      transSupportBasicHtmlNodes: true,\n      transKeepBasicHtmlNodesFor: ['br', 'strong', 'span', 'code', 'p'],\n    },\n  });\n\nconst useCurrentLanguage = () => {\n  const [lang, _setLang] = useState(\n    //@ts-ignore\n    globalThis?.backendaioptions?.get('current_language'),\n  );\n  const { i18n } = useTranslation();\n\n  useEffect(() => {\n    // TODO: remove this hack to initialize i18next\n    setTimeout(() => i18n?.changeLanguage(lang), 0);\n    // For changing locale globally, use dayjs.locale instead of dayjs().locale\n    dayjs.locale(lang);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const handler = (e: Event) => {\n      //@ts-ignore\n      _setLang(e?.detail?.lang);\n      //@ts-ignore\n      const lang: string = e?.detail?.lang || 'en';\n      i18n?.changeLanguage(lang);\n      // For changing locale globally, use dayjs.locale instead of dayjs().locale\n      dayjs.locale(lang);\n    };\n    window.addEventListener('langChanged', handler);\n    return () => window.removeEventListener('langChanged', handler);\n  }, [i18n]);\n\n  return [lang] as const;\n};\n\nconst DefaultProviders: React.FC<DefaultProvidersProps> = ({\n  children,\n  value,\n  styles,\n  shadowRoot,\n  dispatchEvent,\n}) => {\n  const cache = useMemo(() => createCache(), []);\n  const [lang] = useCurrentLanguage();\n  const themeConfig = useCustomThemeConfig();\n\n  const componentValues = useMemo(() => {\n    return {\n      value,\n      dispatchEvent,\n      moveTo: (path, params) => {\n        dispatchEvent('moveTo', { path, params: params });\n      },\n    } as WebComponentContextType;\n  }, [value, dispatchEvent]);\n  return (\n    <>\n      {RelayEnvironment && (\n        <RelayEnvironmentProvider environment={RelayEnvironment}>\n          <React.StrictMode>\n            <style>\n              {styles}\n              {rawFixAntCss}\n            </style>\n            <QueryClientProvider client={queryClient}>\n              <ShadowRootContext.Provider value={shadowRoot}>\n                <WebComponentContext.Provider value={componentValues}>\n                  <ConfigProvider\n                    // @ts-ignore\n                    getPopupContainer={(triggerNode) => {\n                      return triggerNode?.parentNode || shadowRoot;\n                    }}\n                    //TODO: apply other supported locales\n                    locale={'ko' === lang ? ko_KR : en_US}\n                    theme={themeConfig}\n                  >\n                    <App>\n                      <StyleProvider container={shadowRoot} cache={cache}>\n                        <Suspense fallback=\"\">\n                          <BrowserRouter>\n                            <QueryParamProvider\n                              adapter={ReactRouter6Adapter}\n                              options={\n                                {\n                                  // searchStringToObject: queryString.parse,\n                                  // objectToSearchString: queryString.stringify,\n                                }\n                              }\n                            >\n                              <RoutingEventHandler />\n                              {children}\n                            </QueryParamProvider>\n                          </BrowserRouter>\n                        </Suspense>\n                      </StyleProvider>\n                    </App>\n                  </ConfigProvider>\n                </WebComponentContext.Provider>\n              </ShadowRootContext.Provider>\n            </QueryClientProvider>\n          </React.StrictMode>\n        </RelayEnvironmentProvider>\n      )}\n    </>\n  );\n};\n\nconst RoutingEventHandler = () => {\n  const navigate = useNavigate();\n  useLayoutEffect(() => {\n    const handleNavigate = (e: any) => {\n      const { detail } = e;\n      navigate(detail, {\n        // we don't want to add duplicated one to history.\n        // On lit component side, it adds to history already.\n        replace: true,\n      });\n    };\n    document.addEventListener('react-navigate', handleNavigate);\n\n    return () => {\n      document.removeEventListener('react-navigate', handleNavigate);\n    };\n  }, [navigate]);\n\n  return null;\n};\n\nexport default DefaultProviders;\n","import { iSizeToSize } from '../helper';\nimport Flex from './Flex';\nimport { Tooltip, Typography, theme } from 'antd';\nimport React, { ReactElement } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport type ResourceTypeKey =\n  | 'cpu'\n  | 'mem'\n  | 'cuda.device'\n  | 'cuda.shares'\n  | 'rocm.device'\n  | 'tpu.device'\n  | 'ipu.device'\n  | 'atom.device'\n  | 'warboy.device';\n\nexport const ACCELERATOR_UNIT_MAP: {\n  [key: string]: string;\n} = {\n  'cuda.device': 'GPU',\n  'cuda.shares': 'FGPU',\n  'rocm.device': 'GPU',\n  'tpu.device': 'TPU',\n  'ipu.device': 'IPU',\n  'atom.device': 'ATOM',\n  'warboy.device': 'Warboy',\n};\n\nexport type ResourceOpts = {\n  shmem?: number;\n};\ninterface Props {\n  type: ResourceTypeKey;\n  extra?: ReactElement;\n  opts?: ResourceOpts;\n  value: string;\n}\n\ntype ResourceTypeInfo<V> = {\n  [key in string]: V;\n};\nconst ResourceNumber: React.FC<Props> = ({\n  type,\n  value: amount,\n  extra,\n  opts,\n}) => {\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const units: ResourceTypeInfo<string> = {\n    cpu: t('session.core'),\n    mem: 'GiB',\n    ...ACCELERATOR_UNIT_MAP,\n  };\n\n  return (\n    <Flex direction=\"row\" gap=\"xxs\">\n      <ResourceTypeIcon type={type} />\n      <Typography.Text>\n        {units[type] === 'GiB'\n          ? iSizeToSize(amount + 'b', 'g', 2).numberFixed\n          : units[type] === 'FGPU'\n          ? parseFloat(amount).toFixed(2)\n          : amount}\n      </Typography.Text>\n      <Typography.Text type=\"secondary\">{units[type]}</Typography.Text>\n      {type === 'mem' && opts?.shmem && (\n        <Typography.Text\n          type=\"secondary\"\n          style={{ fontSize: token.fontSizeSM }}\n        >\n          (SHM: {iSizeToSize(opts.shmem + 'b', 'g', 2).numberFixed}\n          GiB)\n        </Typography.Text>\n      )}\n      {extra}\n    </Flex>\n  );\n};\n\nconst MWCIconWrap: React.FC<{ size?: number; children: string }> = ({\n  size = 16,\n  children,\n}) => {\n  return (\n    // @ts-ignore\n    <mwc-icon\n      style={{\n        '--mdc-icon-size': `${size + 2}px`,\n        width: size,\n        height: size,\n      }}\n    >\n      {children}\n      {/* @ts-ignore */}\n    </mwc-icon>\n  );\n};\ninterface AccTypeIconProps\n  extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'src'> {\n  type: ResourceTypeKey;\n  showIcon?: boolean;\n  showUnit?: boolean;\n  showTooltip?: boolean;\n  size?: number;\n}\nexport const ResourceTypeIcon: React.FC<AccTypeIconProps> = ({\n  type,\n  size = 16,\n  showIcon = true,\n  showUnit = true,\n  showTooltip = true,\n  ...props\n}) => {\n  const { t } = useTranslation();\n\n  const resourceTypeIconSrcMap: ResourceTypeInfo<\n    [ReactElement | string, string]\n  > = {\n    cpu: [\n      <MWCIconWrap size={size}>developer_board</MWCIconWrap>,\n      t('session.core'),\n    ],\n    mem: [<MWCIconWrap size={size}>memory</MWCIconWrap>, 'GiB'],\n    'cuda.device': ['/resources/icons/file_type_cuda.svg', 'GPU'],\n    'cuda.shares': ['/resources/icons/file_type_cuda.svg', 'FGPU'],\n    'rocm.device': ['/resources/icons/ROCm.png', 'GPU'],\n    'tpu.device': [<MWCIconWrap size={size}>view_module</MWCIconWrap>, 'TPU'],\n    'ipu.device': [<MWCIconWrap size={size}>view_module</MWCIconWrap>, 'IPU'],\n    'atom.device': ['/resources/icons/rebel.svg', 'ATOM'],\n    'warboy.device': ['/resources/icons/furiosa.svg', 'Warboy'],\n  };\n\n  return (\n    <Tooltip\n      title={\n        showTooltip ? `${type} (${resourceTypeIconSrcMap[type][1]})` : undefined\n      }\n    >\n      {typeof resourceTypeIconSrcMap[type]?.[0] === 'string' ? (\n        <img\n          {...props}\n          style={{\n            height: size,\n            ...(props.style || {}),\n          }}\n          // @ts-ignore\n          src={resourceTypeIconSrcMap[type]?.[0] || ''}\n          alt={type}\n        />\n      ) : (\n        <div style={{ width: 16, height: 16 }}>\n          {resourceTypeIconSrcMap[type]?.[0] || type}\n        </div>\n      )}\n    </Tooltip>\n  );\n};\n\nexport default ResourceNumber;\n","/**\n * @generated SignedSource<<f8c3ae59478b8ffd874be16c33231c44>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type ResourcePresetSelectQuery$variables = {};\nexport type ResourcePresetSelectQuery$data = {\n  readonly resource_presets: ReadonlyArray<{\n    readonly name: string | null;\n    readonly resource_slots: any | null;\n    readonly shared_memory: any | null;\n  } | null> | null;\n};\nexport type ResourcePresetSelectQuery = {\n  response: ResourcePresetSelectQuery$data;\n  variables: ResourcePresetSelectQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"ResourcePreset\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"resource_presets\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"resource_slots\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"shared_memory\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"bd89430b9924d926a1b8e91191746b4f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"ResourcePresetSelectQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query ResourcePresetSelectQuery {\\n  resource_presets {\\n    name\\n    resource_slots\\n    shared_memory\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"9841642e96d89476c2848bfb093ed9c5\";\n\nexport default node;\n","import { ExclamationCircleTwoTone } from '@ant-design/icons';\nimport { Button, Card, CardProps, theme } from 'antd';\nimport _ from 'lodash';\nimport React, { ReactNode } from 'react';\n\ninterface BAICardProps extends CardProps {\n  status?: 'success' | 'error' | 'warning' | 'default';\n  extraButtonTitle?: string | ReactNode;\n  onClickExtraButton?: () => void;\n}\n\nconst BAICard: React.FC<BAICardProps> = ({\n  status = 'default',\n  extraButtonTitle,\n  onClickExtraButton,\n  extra,\n  style,\n  ...cardProps\n}) => {\n  const { token } = theme.useToken();\n  const _extra =\n    extra ||\n    (extraButtonTitle && (\n      <Button\n        type=\"link\"\n        icon={\n          status === 'error' ? (\n            <ExclamationCircleTwoTone twoToneColor={token.colorError} />\n          ) : undefined\n        }\n        onClick={onClickExtraButton}\n      >\n        {extraButtonTitle}\n      </Button>\n    )) ||\n    undefined;\n  return (\n    <Card\n      style={_.extend(style, {\n        borderColor:\n          status === 'error'\n            ? token.colorError\n            : status === 'warning'\n            ? token.colorWarning\n            : status === 'success'\n            ? token.colorSuccess\n            : style?.borderColor, // default\n      })}\n      extra={_extra}\n      {...cardProps}\n    />\n  );\n};\n\nexport default BAICard;\n","import { DatePicker } from 'antd';\nimport { PickerDateProps } from 'antd/es/date-picker/generatePicker';\nimport dayjs, { Dayjs } from 'dayjs';\nimport React from 'react';\n\ninterface DatePickerISOProps\n  extends Omit<PickerDateProps<Dayjs>, 'value' | 'onChange'> {\n  value?: string;\n  onChange?: (value: string | undefined) => void;\n}\nconst DatePickerISO: React.FC<DatePickerISOProps> = ({\n  value,\n  onChange,\n  ...pickerProps\n}) => {\n  return (\n    <DatePicker\n      value={value ? dayjs(value) : undefined}\n      onChange={(value, dateString) => {\n        onChange && onChange(value?.toISOString());\n      }}\n      {...pickerProps}\n    />\n  );\n};\n\nexport default DatePickerISO;\n","import Flex from './Flex';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Form, FormItemProps, Input, InputRef } from 'antd';\nimport { FormListProps } from 'antd/lib/form';\nimport _ from 'lodash';\nimport React, { useRef } from 'react';\n\ninterface EnvVarFormListProps extends Omit<FormListProps, 'children'> {\n  formItemProps?: FormItemProps;\n}\nconst EnvVarFormList: React.FC<EnvVarFormListProps> = ({\n  formItemProps,\n  ...props\n}) => {\n  const inputRef = useRef<InputRef>(null);\n\n  return (\n    <Form.List {...props}>\n      {(fields, { add, remove }) => {\n        return (\n          <Flex direction=\"column\" gap=\"xs\" align=\"stretch\">\n            {fields.map(({ key, name, ...restField }, index) => (\n              <Flex key={key} direction=\"row\" align=\"baseline\" gap=\"xs\">\n                <Form.Item\n                  {...restField}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  name={[name, 'variable']}\n                  rules={[\n                    { required: true, message: 'Enter Variable name' },\n                    {\n                      pattern: /^[a-zA-Z_][a-zA-Z0-9_]*$/,\n                      message:\n                        'Variable name must start with a letter or underscore, and can only contain letters, numbers, and underscores.',\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(rule, variableName) {\n                        const variableNames = _.map(\n                          getFieldValue('envList'),\n                          (i) => i?.variable,\n                        );\n\n                        if (\n                          variableNames.length > 0 &&\n                          _.filter(variableNames, (i) => i === variableName)\n                            .length > 1\n                        ) {\n                          return Promise.reject('Variable name already exists');\n                        } else {\n                          return Promise.resolve();\n                        }\n                      },\n                    }),\n                  ]}\n                  {...formItemProps}\n                >\n                  <Input\n                    ref={index === fields.length - 1 ? inputRef : null}\n                    placeholder=\"Variable\"\n                  />\n                </Form.Item>\n                <Form.Item\n                  {...restField}\n                  name={[name, 'value']}\n                  style={{ marginBottom: 0, flex: 1 }}\n                  rules={[{ required: true, message: 'Enter value' }]}\n                >\n                  <Input placeholder=\"Value\" />\n                </Form.Item>\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Flex>\n            ))}\n            <Form.Item noStyle>\n              <Button\n                type=\"dashed\"\n                onClick={() => {\n                  add();\n                  setTimeout(() => {\n                    if (inputRef.current) {\n                      inputRef.current.focus();\n                    }\n                  }, 0);\n                }}\n                icon={<PlusOutlined />}\n                block\n              >\n                Add variable\n              </Button>\n            </Form.Item>\n          </Flex>\n        );\n      }}\n    </Form.List>\n  );\n};\n\nexport default EnvVarFormList;\n","import { Form, FormItemProps, Select, Tag } from 'antd';\nimport { TagProps } from 'antd/lib';\nimport _ from 'lodash';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\ninterface Props extends FormItemProps {}\n\nconst MIN_PORT = 1024;\nconst MAX_PORT = 65535;\nconst PortSelectFormItem: React.FC<Props> = ({ ...formItemProps }) => {\n  const { t } = useTranslation();\n  return (\n    <Form.Item\n      label={t('session.launcher.PreOpenPortTitle')}\n      name=\"ports\"\n      tooltip={<Trans i18nKey=\"session.launcher.DescSetPreOpenPort\" />}\n      extra={t('session.launcher.PreOpenPortRangeGuide')}\n      rules={[\n        // {\n        //   max: 2,\n        //   type: 'array',\n        // },\n        ({ getFieldValue }) => ({\n          validator(rule, values) {\n            if (\n              _.every(values, (v) => {\n                const port = parseInt(v);\n                return port >= MIN_PORT && port <= MAX_PORT;\n              })\n            ) {\n              return Promise.resolve();\n            }\n            return Promise.reject(\n              new Error(t('session.launcher.PreOpenPortRange')),\n            );\n          },\n        }),\n      ]}\n      {...formItemProps}\n    >\n      <Select\n        mode=\"tags\"\n        tagRender={(props) => {\n          return (\n            <PortTag\n              closable={props.closable}\n              onClose={props.onClose}\n              onMouseDown={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n              value={props.value}\n            >\n              {props.label}\n            </PortTag>\n          );\n        }}\n        style={{ width: '100%' }}\n        // placeholder={t('session.launcher.preopen')}\n        // options={_.map(portGuides, (v, k) => ({\n        //   value: parseInt(k),\n        //   // label: `${k} - ${v}`,\n        // }))}\n        suffixIcon={null}\n        open={false}\n        tokenSeparators={[',', ' ']}\n      />\n    </Form.Item>\n  );\n};\n\ninterface PortTagProps extends TagProps {\n  value: string;\n}\nexport const PortTag: React.FC<PortTagProps> = ({ value, ...tagProps }) => {\n  const port = parseInt(value);\n  const isValid = port >= MIN_PORT && port <= MAX_PORT;\n  return <Tag color={isValid ? undefined : 'red'} {...tagProps} />;\n};\n\n// const portGuides = {\n//   '5432': 'PostgreSQL',\n//   '3306': 'MySQL',\n//   '1521': 'Oracle',\n//   '27017': 'MongoDB',\n//   '6379': 'Redis',\n//   '11211': 'Memcached',\n//   '9200': 'Elasticsearch',\n//   '5601': 'Kibana',\n//   '9600': 'Logstash',\n//   '9042': 'Cassandra',\n//   '2181': 'Zookeeper',\n//   '9092': 'Kafka',\n//   '80': 'HTTP',\n//   '443': 'HTTPS',\n//   '22': 'SSH',\n//   '21': 'FTP',\n//   '25': 'SMTP',\n//   '110': 'POP3',\n//   '143': 'IMAP',\n//   '53': 'DNS',\n//   '389': 'LDAP',\n//   '636': 'LDAPS',\n//   '8080': 'HTTP Alt',\n//   '8443': 'HTTP Alt SSL',\n//   '465': 'SMTP SSL',\n//   '587': 'SMTP TLS',\n//   '993': 'IMAP SSL',\n//   '995': 'POP3 SSL',\n//   '7001': 'WebLogic',\n//   '7002': 'WebLogic SSL',\n//   '4848': 'GlassFish',\n//   '8181': 'GlassFish SSL',\n//   '8081': 'Nginx',\n// };\n\nexport default PortSelectFormItem;\n","import { useUpdatableState } from '../hooks';\nimport Flex from './Flex';\nimport { ResourcePresetSelectQuery } from './__generated__/ResourcePresetSelectQuery.graphql';\nimport { EditOutlined } from '@ant-design/icons';\nimport { useThrottleFn } from 'ahooks';\nimport { Select } from 'antd';\nimport { SelectProps } from 'antd/lib';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useTransition } from 'react';\nimport { useLazyLoadQuery } from 'react-relay';\n\n// const myFunc= ()=>{\n//   const param: any = { group: globalThis.backendaiclient.current_group };\n//       if (\n//         this.current_user_group !== globalThis.backendaiclient.current_group ||\n//         this.scaling_groups.length == 0 ||\n//         (this.scaling_groups.length === 1 && this.scaling_groups[0].name === '')\n//       ) {\n//         this.current_user_group = globalThis.backendaiclient.current_group;\n//         const sgs = await globalThis.backendaiclient.scalingGroup.list(\n//           this.current_user_group,\n//         );\n//         // Make empty scaling group item if there is no scaling groups.\n//         this.scaling_groups =\n//           sgs.scaling_groups.length > 0 ? sgs.scaling_groups : [{ name: '' }];\n//       }\n//       if (this.scaling_groups.length > 0) {\n//         const scaling_groups: any = [];\n//         this.scaling_groups.map((group) => {\n//           scaling_groups.push(group.name);\n//         });\n//         if (\n//           this.scaling_group === '' ||\n//           !scaling_groups.includes(this.scaling_group)\n//         ) {\n//           this.scaling_group = this.scaling_groups[0].name;\n//         }\n//         param['scaling_group'] = this.scaling_group;\n//       }\n//       const resourcePresetInfo =\n//         await globalThis.backendaiclient.resourcePreset.check(param);\n// }\n\ntype Y = ArrayElement<NonNullable<SelectProps['options']>>;\ninterface PresetOptionType extends Y {\n  options?: PresetOptionType[];\n  preset?: {\n    name: string;\n    resource_slots: string;\n    shared_memory: string;\n  };\n}\ninterface ResourcePresetSelectProps extends Omit<SelectProps, 'onChange'> {\n  onChange?: (value: string, options: PresetOptionType) => void;\n}\nconst ResourcePresetSelect: React.FC<ResourcePresetSelectProps> = ({\n  ...selectProps\n}) => {\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const { run: updateFetchKeyThrottled } = useThrottleFn(updateFetchKey, {\n    wait: 3000,\n    trailing: false,\n    leading: true,\n  });\n  const [isPendingUpdate, _startTransition] = useTransition();\n  const updateFetchKeyUnderTransition = () => {\n    _startTransition(() => {\n      updateFetchKeyThrottled();\n    });\n  };\n  const { resource_presets } = useLazyLoadQuery<ResourcePresetSelectQuery>(\n    graphql`\n      query ResourcePresetSelectQuery {\n        resource_presets {\n          name\n          resource_slots\n          shared_memory\n        }\n      }\n    `,\n    {},\n    {\n      fetchKey: fetchKey,\n      fetchPolicy: fetchKey === 'first' ? 'store-and-network' : 'network-only',\n    },\n  );\n  // const resourcePresetInfo = await globalThis.backendaiclient.resourcePreset.check(param);\n  return (\n    <Select\n      loading={isPendingUpdate}\n      // options={_.map(resource_presets, (preset) => {\n      //   return {\n      //     value: preset?.name,\n      //     label: preset?.name,\n      //   };\n      // })}\n      options={[\n        {\n          value: 'custom',\n          label: (\n            <Flex gap={'xs'} style={{ display: 'inline-flex' }}>\n              <EditOutlined /> Custom\n            </Flex>\n          ),\n          // label: (\n          //   <Flex direction=\"row\" gap=\"xs\">\n          //     <Typography.Text strong>Custom</Typography.Text>\n          //     <Typography.Text type=\"secondary\">\n          //       Customize allocation amount\n          //     </Typography.Text>\n          //   </Flex>\n          // ),\n        },\n        {\n          // value: 'preset1',\n          label: 'Preset',\n          // @ts-ignore\n          options: _.map(resource_presets, (preset) => {\n            return {\n              value: preset?.name,\n              label: preset?.name,\n              preset,\n            };\n          }),\n        },\n      ]}\n      showSearch\n      {...selectProps}\n      onDropdownVisibleChange={(open) => {\n        if (open) {\n          console.log(open);\n          updateFetchKeyUnderTransition();\n        }\n      }}\n    ></Select>\n  );\n};\n\nexport default ResourcePresetSelect;\n","import { iSizeToSize } from '../helper';\nimport { useResourceSlots } from '../hooks/backendai';\nimport { ACCELERATOR_UNIT_MAP } from './ResourceNumber';\nimport ResourcePresetSelect from './ResourcePresetSelect';\nimport SliderInputItem from './SliderInputFormItem';\nimport { Card, Form, Select, theme } from 'antd';\nimport _ from 'lodash';\nimport { Trans, useTranslation } from 'react-i18next';\n\nconst ResourceAllocationFormItems = () => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  const { token } = theme.useToken();\n  const [resourceSlots] = useResourceSlots();\n  // TODO: auto select preset\n  return (\n    <>\n      <Form.Item\n        label={t('resourcePreset.ResourcePresets')}\n        name=\"allocationPreset\"\n        required\n        style={{ marginBottom: token.marginXS }}\n      >\n        <ResourcePresetSelect\n          onChange={(value, options) => {\n            const slots = _.pick(\n              JSON.parse(options?.preset?.resource_slots || '{}'),\n              _.keys(resourceSlots),\n            );\n            form.setFieldsValue({\n              resource: {\n                ...slots,\n                // transform to GB based on preset values\n                mem: iSizeToSize((slots?.mem || 0) + 'b', 'g', 2).number,\n                shmem: iSizeToSize(\n                  (options?.preset?.shared_memory || 0) + 'b',\n                  'g',\n                  2,\n                ).number,\n              },\n            });\n          }}\n        />\n      </Form.Item>\n      <Card\n        style={{\n          marginBottom: token.margin,\n        }}\n      >\n        <Form.Item\n          shouldUpdate={(prev, cur) =>\n            prev.allocationPreset !== cur.allocationPreset\n          }\n          noStyle\n        >\n          {({ getFieldValue }) => {\n            return (\n              // getFieldValue('allocationPreset') === 'custom' && (\n              <>\n                {resourceSlots?.cpu && (\n                  <SliderInputItem\n                    name={['resource', 'cpu']}\n                    initialValue={0}\n                    label={t('session.launcher.CPU')}\n                    tooltip={<Trans i18nKey={'session.launcher.DescCPU'} />}\n                    // min={parseInt(\n                    //   _.find(\n                    //     currentImage?.resource_limits,\n                    //     (i) => i?.key === 'cpu',\n                    //   )?.min || '0',\n                    // )}\n                    // max={parseInt(\n                    //   _.find(\n                    //     currentImage?.resource_limits,\n                    //     (i) => i?.key === 'cpu',\n                    //   )?.max || '100',\n                    // )}\n                    inputNumberProps={{\n                      addonAfter: t('session.launcher.Core'),\n                    }}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                    ]}\n                  />\n                )}\n                {resourceSlots?.mem && (\n                  <SliderInputItem\n                    name={['resource', 'mem']}\n                    initialValue={0}\n                    label={t('session.launcher.Memory')}\n                    tooltip={<Trans i18nKey={'session.launcher.DescMemory'} />}\n                    max={30}\n                    inputNumberProps={{\n                      addonAfter: 'GB',\n                    }}\n                    step={0.05}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                    ]}\n                  />\n                )}\n                {resourceSlots?.mem && (\n                  <SliderInputItem\n                    name={['resource', 'shmem']}\n                    initialValue={0}\n                    label={t('session.launcher.SharedMemory')}\n                    tooltip={\n                      <Trans i18nKey={'session.launcher.DescSharedMemory'} />\n                    }\n                    max={30}\n                    step={0.1}\n                    inputNumberProps={{\n                      addonAfter: 'GB',\n                    }}\n                    required\n                    rules={[\n                      {\n                        required: true,\n                      },\n                    ]}\n                  />\n                )}\n                {_.chain(resourceSlots)\n                  .omit(['cpu', 'mem', 'shmem'])\n                  .map((unit, name, accelerators) => {\n                    return (\n                      <SliderInputItem\n                        name={['resource', name]}\n                        initialValue={0}\n                        label={t(`session.launcher.AIAccelerator`)}\n                        // tooltip={\n                        //   <Trans i18nKey={'session.launcher.DescSharedMemory'} />\n                        // }\n                        max={30}\n                        step={name.endsWith('shares') ? 0.1 : 1}\n                        inputNumberProps={{\n                          addonAfter: (\n                            <Form.Item\n                              noStyle\n                              name={'acceleratorType'}\n                              initialValue={_.keys(accelerators)[0]}\n                            >\n                              <Select\n                                suffixIcon={\n                                  _.size(accelerators) > 1 ? undefined : null\n                                }\n                              >\n                                {_.map(accelerators, (value, name) => {\n                                  return (\n                                    <Select.Option value={name}>\n                                      {ACCELERATOR_UNIT_MAP[name] || 'UNIT'}\n                                    </Select.Option>\n                                  );\n                                })}\n                              </Select>\n                            </Form.Item>\n                          ),\n                        }}\n                        required\n                        rules={[\n                          {\n                            required: true,\n                          },\n                        ]}\n                      />\n                    );\n                  })\n                  .value()}\n              </>\n            );\n          }}\n        </Form.Item>\n      </Card>\n    </>\n  );\n};\n\nexport default ResourceAllocationFormItems;\n","import { useBaiSignedRequestWithPromise } from '../helper';\nimport { useCurrentProjectValue, useUpdatableState } from '../hooks';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport { useShadowRoot } from './DefaultProviders';\nimport DoubleTag, { DoubleTagObjectValue } from './DoubleTag';\nimport Flex from './Flex';\nimport TextHighlighter from './TextHighlighter';\nimport { VFolder } from './VFolderSelect';\nimport {\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { useControllableValue } from 'ahooks';\nimport {\n  Button,\n  Form,\n  Input,\n  Table,\n  TableProps,\n  Tooltip,\n  Typography,\n} from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\nimport React, { useEffect, useState, useTransition } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nexport interface VFolderFile {\n  name: string;\n  type: 'FILE' | 'DIRECTORY';\n  size: number;\n  mode: string;\n  created: string;\n  modified: string;\n}\ntype VFolderKey = string | number;\n\nexport interface VFolderSelectValue {\n  alias?: string;\n  key: string;\n}\n\nexport interface AliasMap {\n  [key: string]: string;\n}\n\ntype DataIndex = keyof VFolder;\n\ninterface Props extends Omit<TableProps<VFolder>, 'rowKey'> {\n  showAliasInput?: boolean;\n  selectedRowKeys?: VFolderKey[];\n  onChangeSelectedRowKeys?: (selectedKeys: VFolderKey[]) => void;\n  aliasBasePath?: string;\n  aliasMap?: AliasMap;\n  onChangeAliasMap?: (aliasMap: AliasMap) => void;\n  filter?: (vFolder: VFolder) => boolean;\n  rowKey: string | number;\n}\n\nconst VFolderTable: React.FC<Props> = ({\n  filter,\n  showAliasInput = false,\n  selectedRowKeys: controlledSelectedRowKeys = [],\n  onChangeSelectedRowKeys,\n  aliasBasePath = '/home/work/',\n  aliasMap: controlledAliasMap,\n  onChangeAliasMap,\n  rowKey = 'name',\n  ...tableProps\n}) => {\n  const getRowKey = React.useMemo(() => {\n    return (record: VFolder) => {\n      const key = record && record[rowKey as DataIndex];\n      return key as VFolderKey;\n    };\n  }, [rowKey]);\n\n  const [selectedRowKeys, setSelectedRowKeys] = useControllableValue<\n    VFolderKey[]\n  >(\n    {\n      value: controlledSelectedRowKeys,\n      onChange: onChangeSelectedRowKeys,\n    },\n    {\n      defaultValue: [],\n    },\n  );\n\n  const [aliasMap, setAliasMap] = useControllableValue<AliasMap>(\n    {\n      value: controlledAliasMap,\n      onChange: onChangeAliasMap,\n    },\n    {\n      defaultValue: {},\n    },\n  );\n\n  const [internalForm] = Form.useForm<AliasMap>();\n  useEffect(() => {\n    // TODO: check setFieldsValue performance\n    if (aliasMap) {\n      internalForm.setFieldsValue(\n        _.mapValues(aliasMap, (v) => {\n          if (v.startsWith(aliasBasePath)) {\n            return v.slice(aliasBasePath.length);\n          }\n          return v;\n        }),\n      );\n      internalForm.validateFields();\n    }\n  }, [aliasMap, internalForm, aliasBasePath]);\n\n  const { t } = useTranslation();\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const currentProject = useCurrentProjectValue();\n  const [fetchKey, updateFetchKey] = useUpdatableState('first');\n  const [isPendingRefetch, startRefetchTransition] = useTransition();\n  const { data: allFolderList } = useTanQuery({\n    queryKey: ['VFolderSelectQuery', fetchKey],\n    queryFn: () => {\n      return baiRequestWithPromise({\n        method: 'GET',\n        url: `/folders?group_id=${currentProject.id}`,\n      }) as Promise<VFolder[]>;\n    },\n    staleTime: 0,\n  });\n  const [searchKey, setSearchKey] = useState('');\n  const displayingFolders = _.filter(allFolderList, (vf) => {\n    // keep selected folders\n    if (selectedRowKeys.includes(getRowKey(vf))) {\n      return true;\n    }\n    // filter by search key\n    return (\n      (!filter || filter(vf)) && (!searchKey || vf.name.includes(searchKey))\n    );\n  });\n  // const { token } = theme.useToken();\n  // const searchInput = useRef<InputRef>(null);\n\n  // TODO: set defaults\n  // useUpdateEffect(() => {\n  //   setSelectedRowKeys(defaultSelectedKeys || []);\n  // }, [defaultSelectedKeys]);\n\n  const handleAliasUpdate = (e?: any) => {\n    e?.preventDefault();\n    internalForm\n      .validateFields()\n      .then((values) => {})\n      .catch(() => {})\n      .finally(() => {\n        setAliasMap(\n          _.mapValues(\n            _.pickBy(internalForm.getFieldsValue(), (v) => !!v), //remove empty\n            (v, k) => mapAliasToPath(k, v), // add alias base path\n          ),\n        );\n      });\n  };\n\n  const hasPermission = (vFolder: VFolder, perm: string) => {\n    if (vFolder.permission.includes(perm)) {\n      return true;\n    }\n    if (vFolder.permission.includes('w') && perm === 'r') {\n      return true;\n    }\n    return false;\n  };\n\n  const mapAliasToPath = (name: VFolderKey, input?: string) => {\n    if (_.isEmpty(input)) {\n      return `${aliasBasePath}${name}`;\n    } else if (input?.startsWith('/')) {\n      return input;\n    } else {\n      return `${aliasBasePath}${input}`;\n    }\n  };\n\n  const shadowRoot = useShadowRoot();\n\n  const columns: ColumnsType<VFolder> = [\n    {\n      title: (\n        <Flex direction=\"row\" gap=\"xxs\">\n          <Typography.Text>{t('data.folders.Name')}</Typography.Text>\n          {showAliasInput && (\n            <>\n              <Typography.Text\n                type=\"secondary\"\n                style={{ fontWeight: 'normal' }}\n              >\n                ({t('session.launcher.FolderAlias')}{' '}\n                <Tooltip\n                  title={<Trans i18nKey={'session.launcher.DescFolderAlias'} />}\n                  style={{\n                    zIndex: 10000,\n                  }}\n                  // @ts-ignore\n                  getPopupContainer={() => shadowRoot}\n                >\n                  <QuestionCircleOutlined />\n                </Tooltip>\n                )\n              </Typography.Text>\n            </>\n          )}\n        </Flex>\n      ),\n      dataIndex: 'name',\n      sorter: (a, b) => a.name.localeCompare(b.name),\n      render: (value, record) => {\n        const isCurrentRowSelected = selectedRowKeys.includes(\n          getRowKey(record),\n        );\n\n        return (\n          <Flex\n            direction=\"column\"\n            align=\"stretch\"\n            gap={'xxs'}\n            style={\n              showAliasInput && isCurrentRowSelected\n                ? { display: 'inline-flex', height: 70, width: '100%' }\n                : undefined\n            }\n          >\n            <TextHighlighter keyword={searchKey}>{value}</TextHighlighter>\n            {showAliasInput && isCurrentRowSelected && (\n              <Form.Item\n                noStyle\n                // rerender when\n                shouldUpdate={(prev, cur) =>\n                  prev[getRowKey(record)] !== cur[getRowKey(record)]\n                }\n              >\n                {() => {\n                  const allAliasPathMap = _(selectedRowKeys).reduce(\n                    (result, name) => {\n                      result[name] =\n                        aliasMap?.[name] || mapAliasToPath(name, undefined);\n\n                      return result;\n                    },\n                    {} as AliasMap,\n                  );\n\n                  return (\n                    <Form.Item\n                      name={getRowKey(record)}\n                      rules={[\n                        {\n                          // required: true,\n                          type: 'string',\n                          pattern: /^[a-zA-Z0-9_/-]*$/,\n                          message: t('session.launcher.FolderAliasInvalid'),\n                        },\n                        {\n                          type: 'string',\n                          validator: async (rule, value) => {\n                            if (\n                              value &&\n                              _.some(\n                                allAliasPathMap,\n                                (path, k) =>\n                                  k !== getRowKey(record) && // not current row\n                                  path ===\n                                    mapAliasToPath(getRowKey(record), value),\n                              )\n                            ) {\n                              return Promise.reject(\n                                t('session.launcher.FolderAliasOverlapping'),\n                              );\n                            }\n                            return Promise.resolve();\n                          },\n                        },\n                      ]}\n                      // dependencies={[getRowKey(record)]}\n                      extra={mapAliasToPath(\n                        record.name,\n                        internalForm.getFieldValue(getRowKey(record)),\n                      )}\n                    >\n                      <Input\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                        placeholder={t('session.launcher.FolderAlias')}\n                        // onPressEnter={handleAliasUpdate}\n                        // onBlur={handleAliasUpdate}\n                        onChange={handleAliasUpdate}\n                        allowClear\n                      ></Input>\n                    </Form.Item>\n                  );\n                }}\n              </Form.Item>\n            )}\n          </Flex>\n        );\n      },\n      fixed: 'left',\n      // ...getColumnSearchProps('name'),\n    },\n    {\n      title: t('data.UsageMode'),\n      dataIndex: 'usage_mode',\n      sorter: (a, b) => a.usage_mode.localeCompare(b.usage_mode),\n    },\n    {\n      title: t('data.Host'),\n      dataIndex: 'host',\n    },\n    {\n      title: t('data.Type'),\n      dataIndex: 'type',\n      sorter: (a, b) => a.type.localeCompare(b.type),\n      render: (value, record) => {\n        return (\n          <Flex direction=\"column\">\n            {record.type === 'user' ? (\n              <UserOutlined title=\"User\" />\n            ) : (\n              <div>Group</div>\n            )}\n            {record.type === 'group' && `(${record.group_name})`}\n          </Flex>\n        );\n      },\n      // render: (value) =>\n      //   value === 'group' ? (\n      //     <GroupOutlined />\n      //   ) : value === 'user' ? (\n      //     <UserOutlined />\n      //   ) : value ? (\n      //     value\n      //   ) : (\n      //     '-'\n      //   ),\n      // filters: [\n      //   {\n      //     text: 'user',\n      //     value: 'user',\n      //   },\n      //   {\n      //     text: 'group',\n      //     value: 'group',\n      //   },\n      // ],\n      // onFilter: (value, record) => record.type.indexOf(value + '') === 0,\n    },\n    // {\n    //   title: 'Group',\n    //   dataIndex: 'group_name',\n    //   sorter: (a, b) => (a.group || '').localeCompare(b.group || ''),\n    //   render: (value) => value || '-',\n    // },\n    {\n      title: t('data.Permission'),\n      dataIndex: 'permission',\n      sorter: (a, b) => a.permission.localeCompare(b.permission),\n      render: (value, row) => {\n        const tagValues: DoubleTagObjectValue[] = _.chain({\n          r: 'green',\n          w: 'blue',\n          d: 'red',\n        })\n          .map((color, perm) => {\n            if (hasPermission(row, perm)) {\n              return {\n                label: perm.toUpperCase(),\n                color,\n              };\n            }\n            return undefined;\n          })\n          .compact()\n          .value();\n\n        return <DoubleTag values={tagValues} />;\n      },\n    },\n    {\n      title: t('data.Created'),\n      dataIndex: 'created_at',\n      sorter: (a, b) => a.created_at.localeCompare(b.created_at),\n      render: (value, record) => dayjs(value).format('L'),\n    },\n    // {\n    //   title: 'Modified',\n    //   dataIndex: 'modified',\n    //   sorter: (a, b) => a.modified.localeCompare(b.modified),\n    //   render: (value) => value || '-',\n    // },\n    // {\n    //   title: 'Size',\n    //   dataIndex: 'size',\n    //   sorter: (a, b) => a.size - b.size,\n    //   render: (value) => value || '-',\n    // },\n    // }\n    // {\n    //   title: 'Max Size',\n    //   dataIndex: 'max_size',\n    //   // sorter: (a, b) => a (a.max_size || '').localeCompare(b.max_size || ''),\n    //   render: (value) => value || '-',\n    // },\n  ];\n  return (\n    <Flex direction=\"column\" align=\"stretch\" gap={'xs'}>\n      <Flex direction=\"row\" gap=\"xs\" justify=\"between\">\n        <Input\n          value={searchKey}\n          onChange={(e) => setSearchKey(e.target.value)}\n          allowClear\n          placeholder={t('data.SearchByName')}\n        />\n        <Button\n          loading={isPendingRefetch}\n          icon={<ReloadOutlined />}\n          onClick={() => {\n            startRefetchTransition(() => {\n              updateFetchKey();\n            });\n          }}\n        />\n      </Flex>\n      <Form form={internalForm}>\n        <Table\n          // size=\"small\"\n          scroll={{ x: 'max-content' }}\n          rowKey={getRowKey}\n          rowSelection={{\n            selectedRowKeys,\n            onChange: (selectedRowKeys) => {\n              setSelectedRowKeys(selectedRowKeys as VFolderKey[]);\n              handleAliasUpdate();\n            },\n          }}\n          showSorterTooltip={false}\n          columns={columns}\n          dataSource={displayingFolders}\n          onRow={(record, rowIndex) => {\n            return {\n              onClick: (event) => {\n                const target = event.target as HTMLElement;\n                // allow click on selection column\n                if (target?.classList?.contains('ant-table-selection-column')) {\n                  event.stopPropagation();\n                  selectedRowKeys.includes(getRowKey(record))\n                    ? setSelectedRowKeys(\n                        selectedRowKeys.filter((k) => k !== getRowKey(record)),\n                      )\n                    : setSelectedRowKeys([\n                        ...selectedRowKeys,\n                        getRowKey(record),\n                      ]);\n                }\n              },\n            };\n          }}\n          {...tableProps}\n        />\n      </Form>\n    </Flex>\n  );\n};\n\nexport default VFolderTable;\n","import VFolderTable, { AliasMap } from './VFolderTable';\nimport { Form, FormItemProps, Input } from 'antd';\nimport _ from 'lodash';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface VFolderTableFromItemProps extends Omit<FormItemProps, 'name'> {}\n\nexport interface VFolderTableFormValues {\n  vfolders: string[];\n  vfoldersAliasMap: AliasMap;\n}\n\nconst VFolderTableFromItem: React.FC<VFolderTableFromItemProps> = ({\n  ...formItemProps\n}) => {\n  const form = Form.useFormInstance();\n  const { t } = useTranslation();\n  Form.useWatch('vfoldersAliasMap', form);\n  return (\n    <>\n      <Form.Item\n        // noStyle\n        hidden\n        name=\"vfoldersAliasMap\"\n        rules={[\n          {\n            validator(rule, map) {\n              const arr = _.chain(form.getFieldValue('mounts'))\n                .reduce((result, name) => {\n                  result[name] = map[name] || '/home/work/' + name;\n                  return result;\n                }, {} as AliasMap)\n                .values()\n                .value();\n              if (_.uniq(arr).length !== arr.length) {\n                return Promise.reject(\n                  t('session.launcher.FolderAliasOverlapping'),\n                );\n              }\n              return Promise.resolve();\n            },\n          },\n        ]}\n      >\n        <Input />\n        {/* <Flex>{form.getFieldValue('vfoldersAliasMap')}</Flex> */}\n      </Form.Item>\n      <Form.Item\n        name={'mounts'}\n        {...formItemProps}\n        valuePropName=\"selectedRowKeys\"\n        trigger=\"onChangeSelectedRowKeys\"\n      >\n        <VFolderTable\n          rowKey=\"name\"\n          showAliasInput\n          aliasMap={form.getFieldValue('vfoldersAliasMap')}\n          onChangeAliasMap={(aliasMap) => {\n            form.setFieldValue('vfoldersAliasMap', aliasMap);\n            form.validateFields(['vfoldersAliasMap']);\n          }}\n          // TODO: implement pagination\n          pagination={false}\n        />\n      </Form.Item>\n    </>\n  );\n};\n\nexport default VFolderTableFromItem;\n","import BAICard from '../BAICard';\nimport DatePickerISO from '../components/DatePickerISO';\nimport { useWebComponentInfo } from '../components/DefaultProviders';\nimport EnvVarFormList from '../components/EnvVarFormList';\nimport Flex from '../components/Flex';\nimport ImageEnvironmentSelectFormItems from '../components/ImageEnvironmentSelectFormItems';\nimport ImageMetaIcon from '../components/ImageMetaIcon';\nimport PortSelectFormItem, { PortTag } from '../components/PortSelectFormItem';\nimport ResourceAllocationFormItems from '../components/ResourceAllocationFormItems';\nimport ResourceGroupSelect from '../components/ResourceGroupSelect';\nimport ResourceNumber from '../components/ResourceNumber';\nimport VFolderTableFromItem from '../components/VFolderTableFormItem';\nimport { iSizeToSize } from '../helper';\nimport {\n  BlockOutlined,\n  LeftOutlined,\n  PlayCircleFilled,\n  PlayCircleOutlined,\n  RightOutlined,\n  SaveOutlined,\n} from '@ant-design/icons';\nimport { useDebounceFn } from 'ahooks';\nimport {\n  Affix,\n  Breadcrumb,\n  Button,\n  Card,\n  Checkbox,\n  Descriptions,\n  Form,\n  Grid,\n  Input,\n  Segmented,\n  Select,\n  StepProps,\n  Steps,\n  Table,\n  Tag,\n  Typography,\n  message,\n  theme,\n} from 'antd';\nimport _ from 'lodash';\nimport React, { useEffect } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { useTranslation } from 'react-i18next';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport {\n  JsonParam,\n  NumberParam,\n  StringParam,\n  useQueryParams,\n  withDefault,\n} from 'use-query-params';\n\nconst INITIAL_FORM_VALUES = {\n  sessionType: 'interactive',\n  allocationPreset: 'custom',\n};\nconst stepParam = withDefault(NumberParam, 0);\nconst formValuesParam = withDefault(JsonParam, INITIAL_FORM_VALUES);\n\nconst SessionLauncherPage = () => {\n  const [\n    { step: currentStep, formValues: initialFormValues, redirectTo },\n    setQuery,\n  ] = useQueryParams({\n    step: stepParam,\n    formValues: formValuesParam,\n    redirectTo: StringParam,\n  });\n\n  const { moveTo } = useWebComponentInfo();\n\n  const { run: syncFormToURLWithDebounce } = useDebounceFn(\n    () => {\n      // To sync the latest form values to URL,\n      // 'trailing' is set to true, and get the form values here.\"\n      setQuery(\n        {\n          formValues: form.getFieldsValue(),\n        },\n        'replaceIn',\n      );\n    },\n    {\n      leading: false,\n      wait: 500,\n      trailing: true,\n    },\n  );\n\n  const setCurrentStep = (nextStep: number) => {\n    setQuery(\n      {\n        step: nextStep,\n      },\n      'pushIn',\n    );\n  };\n  const { token } = theme.useToken();\n\n  const { t } = useTranslation();\n\n  const screens = Grid.useBreakpoint();\n\n  const [form] = Form.useForm<{\n    sessionType: 'interactive' | 'batch' | 'inference';\n    batch: {\n      enabled: boolean;\n    };\n  }>();\n\n  useEffect(() => {\n    if (\n      // if form is changed, validate it to show error on the first render\n      JSON.stringify(INITIAL_FORM_VALUES) !== JSON.stringify(initialFormValues)\n    ) {\n      form.validateFields().catch((e) => {});\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    // TODO: scroll to top\n  }, [currentStep]);\n\n  // before initialFormValues is set, use getFieldValue and useWatch will return undefined\n  const sessionType =\n    Form.useWatch('sessionType', form) ||\n    form.getFieldValue('sessionType') ||\n    initialFormValues.sessionType;\n\n  const steps = _.filter(\n    [\n      {\n        title: t('session.launcher.SessionType'),\n        key: 'sessionType',\n        // status: form.getFieldError('name').length > 0 ? 'error' : undefined,\n      },\n      {\n        title: `${t('session.launcher.Environments')} & ${t(\n          'session.launcher.ResourceAllocation',\n        )} `,\n        key: 'environment',\n      },\n      sessionType !== 'inference' && {\n        title: t('webui.menu.Data&Storage'),\n        key: 'storage',\n      },\n      {\n        title: t('session.launcher.Network'),\n        key: 'network',\n      },\n      {\n        title: t('session.launcher.ConfirmAndLaunch'),\n        icon: (\n          <PlayCircleFilled />\n          // <Flex\n          //   align=\"center\"\n          //   justify=\"center\"\n          //   style={{\n          //     // border: '1px solid gray',\n          //     backgroundColor: '#E8E7E7',\n          //     width: 24,\n          //     height: 24,\n          //     borderRadius: 12,\n          //     fontSize: 16,\n          //   }}\n          // >\n          //   <CaretRightOutlined />\n          // </Flex>\n        ),\n        // @ts-ignore\n        key: 'review',\n      },\n    ] as StepProps[],\n    (v) => !!v,\n  );\n\n  const currentStepKey:\n    | 'sessionType'\n    | 'environment'\n    | 'storage'\n    | 'network'\n    // @ts-ignore\n    | 'review' = steps[currentStep]?.key;\n\n  const hasError = _.some(\n    form.getFieldsError(),\n    (item) => item.errors.length > 0,\n  );\n\n  return (\n    <Flex\n      direction=\"column\"\n      align=\"stretch\"\n      style={{\n        padding: token.paddingSM,\n        width: '100%',\n        justifyContent: 'revert',\n        // height: 500,\n        // overflow: 'scroll',\n      }}\n    >\n      {redirectTo && (\n        <Breadcrumb\n          items={[\n            {\n              title: t('webui.menu.Sessions'),\n              onClick: (e) => {\n                e.preventDefault();\n                moveTo(redirectTo);\n              },\n              href: redirectTo,\n            },\n            {\n              title: t('session.launcher.StartNewSession'),\n            },\n          ]}\n        />\n      )}\n      <Flex direction=\"row\" gap=\"md\" align=\"start\">\n        <Flex\n          direction=\"column\"\n          align=\"stretch\"\n          style={{ flex: 1, maxWidth: 700 }}\n        >\n          <Flex direction=\"row\" justify=\"between\">\n            <Typography.Title level={3} style={{ marginTop: 0 }}>\n              {t('session.launcher.StartNewSession')}\n            </Typography.Title>\n            <Button type=\"link\" icon={<BlockOutlined />}>\n              Templates\n            </Button>\n          </Flex>\n          {/* <Suspense fallback={<FlexActivityIndicator />}> */}\n          <Form.Provider\n            onFormChange={(name, info) => {\n              // use OnFormChange instead of Form's onValuesChange,\n              // because onValuesChange will not be triggered when form is changed programmatically\n              syncFormToURLWithDebounce();\n            }}\n          >\n            <Form form={form} layout=\"vertical\" requiredMark=\"optional\">\n              <Flex\n                direction=\"column\"\n                align=\"stretch\"\n                gap=\"md\"\n                // style={{  }}\n              >\n                {/* Step 0 fields */}\n                <Card\n                  title={t('session.launcher.SessionType')}\n                  style={{\n                    display:\n                      currentStepKey === 'sessionType' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item name=\"sessionType\">\n                    {/* <Radio.Group\n                    options={[\n                      {\n                        label: (\n                          <Flex\n                            direction=\"column\"\n                            align=\"start\"\n                            style={{ marginBottom: token.marginXS }}\n                          >\n                            <Typography.Text strong>\n                              🏃‍♀️ Make, test and run\n                            </Typography.Text>\n                            <Typography.Text type=\"secondary\">\n                              <Typography.Text strong>\n                                Interactive mode\n                              </Typography.Text>{' '}\n                              allows you to create, test and run code\n                              interactively via jupyter notebook, visual studio\n                              code, etc.\n                            </Typography.Text>\n                          </Flex>\n                        ),\n                        value: 'interactive',\n                      },\n                      {\n                        label: (\n                          <Flex direction=\"column\" align=\"start\">\n                            <Typography.Text strong>\n                              ⌚️ Start an long-running task\n                            </Typography.Text>\n                            <Typography.Text type=\"secondary\">\n                              <Typography.Text strong>\n                                Batch mode\n                              </Typography.Text>{' '}\n                              runs your code with multiple node & clusters to\n                              scale your idea\n                            </Typography.Text>\n                          </Flex>\n                        ),\n                        value: 'batch',\n                      },\n                    ]}\n                  /> */}\n                    <Segmented\n                      width={100}\n                      options={[\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"🏃‍♀️ Make, test and run\"\n                              description=\"Interactive mode allows you to create, test and run code interactively via jupyter notebook, visual studio code, etc.\"\n                            />\n                          ),\n                          value: 'interactive',\n                        },\n                        {\n                          label: (\n                            <SessionTypeItem\n                              title=\"⌚️ Start an long-running task\"\n                              description=\"Batch mode runs your code with multiple node & clusters to scale your idea\"\n                            />\n                          ),\n                          value: 'batch',\n                        },\n                        // {\n                        //   label: (\n                        //     <SessionTypeItem\n                        //       title=\"🤖 Run a inference service\"\n                        //       description=\"Inference allow you dynamically scale your mode service\"\n                        //     />\n                        //   ),\n                        //   value: 'inference',\n                        // },\n                      ]}\n                    />\n                  </Form.Item>\n                  <Form.Item\n                    label=\"Session name\"\n                    name=\"name\"\n                    rules={[\n                      {\n                        max: 64,\n                        message: t('session.Validation.SessionNameTooLong64'),\n                      },\n                      {\n                        pattern:\n                          /^(?:[a-zA-Z0-9][a-zA-Z0-9._-]{2,}[a-zA-Z0-9])?$/,\n                        message: t(\n                          'session.Validation.PleaseFollowSessionNameRule',\n                        ).toString(),\n                      },\n                    ]}\n                  >\n                    <Input allowClear />\n                  </Form.Item>\n                </Card>\n\n                {sessionType === 'batch' && (\n                  <Card\n                    title=\"Batch Mode Configuration\"\n                    style={{\n                      display:\n                        currentStepKey === 'sessionType' ? 'block' : 'none',\n                    }}\n                  >\n                    <Form.Item\n                      label={t('session.launcher.StartUpCommand')}\n                      name={['batch', 'command']}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Input.TextArea />\n                    </Form.Item>\n                    <Form.Item label=\"Schedule time\">\n                      <Flex direction=\"row\" gap={'xs'}>\n                        <Form.Item\n                          noStyle\n                          name={['batch', 'enabled']}\n                          valuePropName=\"checked\"\n                        >\n                          <Checkbox>{t('session.launcher.Enable')}</Checkbox>\n                        </Form.Item>\n                        <Form.Item\n                          noStyle\n                          // dependencies={[['batch', 'enabled']]}\n                          shouldUpdate={(prev, next) => {\n                            return (\n                              // @ts-ignore\n                              prev.batch?.enabled !== next.batch?.enabled\n                            );\n                          }}\n                        >\n                          {() => {\n                            const disabled =\n                              form.getFieldValue('batch')?.enabled !== true;\n                            return (\n                              <>\n                                <Form.Item\n                                  name={['batch', 'scheduleDate']}\n                                  noStyle\n                                >\n                                  <DatePickerISO\n                                    disabled={disabled}\n                                    showTime\n                                    // format={'YYYY-MM-DD HH:mm:ss'}\n                                  />\n                                </Form.Item>\n                                {/* <Form.Item\n                                      noStyle\n                                      name={['batch', 'scheduleTime']}\n                                    >\n                                      <TimePicker disabled={disabled} />\n                                    </Form.Item> */}\n                              </>\n                            );\n                          }}\n                        </Form.Item>\n                      </Flex>\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {sessionType === 'inference' && (\n                  <Card title=\"Inference Mode Configuration\">\n                    <Form.Item\n                      name={['inference', 'vFolderName']}\n                      label={t('session.launcher.ModelStorageToMount')}\n                      rules={[\n                        {\n                          required: true,\n                        },\n                      ]}\n                    >\n                      <Select />\n                      {/* <VFolderSelect\n                          filter={(vf) => vf.usage_mode === 'model'}\n                          autoSelectDefault\n                          /> */}\n                    </Form.Item>\n                  </Card>\n                )}\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Environments')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <ErrorBoundary\n                    fallbackRender={(e) => {\n                      console.log(e);\n                      return null;\n                    }}\n                  >\n                    <ImageEnvironmentSelectFormItems />\n                  </ErrorBoundary>\n                  <Form.Item label=\"Environment Variables\">\n                    <EnvVarFormList\n                      name={'envvars'}\n                      formItemProps={{\n                        validateTrigger: ['onChange', 'onBlur'],\n                      }}\n                    />\n                  </Form.Item>\n                </Card>\n                <Card\n                  title={t('session.launcher.ResourceAllocation')}\n                  style={{\n                    display:\n                      currentStepKey === 'environment' ? 'block' : 'none',\n                  }}\n                >\n                  <Form.Item\n                    name=\"resourceGroup\"\n                    label={t('session.ResourceGroup')}\n                    rules={[\n                      {\n                        required: true,\n                      },\n                    ]}\n                  >\n                    <ResourceGroupSelect autoSelectDefault />\n                  </Form.Item>\n                  <ResourceAllocationFormItems />\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('webui.menu.Data&Storage')}\n                  style={{\n                    display: currentStepKey === 'storage' ? 'block' : 'none',\n                  }}\n                >\n                  <VFolderTableFromItem />\n                  {/* <VFolderTable /> */}\n                </Card>\n\n                {/* Step Start*/}\n                <Card\n                  title={t('session.launcher.Network')}\n                  style={{\n                    display: currentStepKey === 'network' ? 'block' : 'none',\n                  }}\n                >\n                  <PortSelectFormItem />\n                </Card>\n\n                {/* Step Start*/}\n                {currentStepKey === 'review' && (\n                  <>\n                    <BAICard\n                      title={t('session.launcher.SessionType')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('name').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'sessionType'),\n                        );\n                      }}\n                      // extra={\n                      //   <Button\n                      //     type=\"link\"\n                      //     onClick={() => {\n                      //       setCurrentStep(\n                      //         // @ts-ignore\n                      //         steps.findIndex((v) => v.key === 'sessionType'),\n                      //       );\n                      //     }}\n                      //     icon={\n                      //       form.getFieldError('name').length > 0 && (\n                      //         <ExclamationCircleTwoTone\n                      //           twoToneColor={token.colorError}\n                      //         />\n                      //       )\n                      //     }\n                      //   >\n                      //     {t('button.Edit')}\n                      //   </Button>\n                      // }\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item label=\"Session Type\" span={24}>\n                          {form.getFieldValue('sessionType')}\n                        </Descriptions.Item>\n                        <Descriptions.Item label={'Session name'} span={24}>\n                          {form.getFieldValue('name')}\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                    <BAICard\n                      title={t('session.launcher.Environments')}\n                      size=\"small\"\n                      status={\n                        _.some(form.getFieldValue('envvars'), (v, idx) => {\n                          return (\n                            form.getFieldError(['envvars', idx, 'variable'])\n                              .length > 0 ||\n                            form.getFieldError(['envvars', idx, 'value'])\n                              .length > 0\n                          );\n                        })\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'environment'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\" layout=\"vertical\" column={1}>\n                        <Descriptions.Item label=\"Image\">\n                          <Flex direction=\"row\" gap=\"xs\" style={{ flex: 1 }}>\n                            <ImageMetaIcon\n                              image={\n                                form.getFieldValue('environments')?.version\n                              }\n                            />\n                            {/* {form.getFieldValue('environments').image} */}\n                            <Typography.Text copyable code>\n                              {form.getFieldValue('environments')?.version}\n                            </Typography.Text>\n                          </Flex>\n                        </Descriptions.Item>\n                        <Descriptions.Item\n                          label={t('session.launcher.EnvironmentVariable')}\n                        >\n                          {form.getFieldValue('envvars')?.length ? (\n                            <SyntaxHighlighter\n                              style={darcula}\n                              codeTagProps={{\n                                style: {\n                                  // fontFamily: 'monospace',\n                                },\n                              }}\n                              // showLineNumbers\n                              customStyle={{\n                                margin: 0,\n                                width: '100%',\n                              }}\n                            >\n                              {_.map(\n                                form.getFieldValue('envvars'),\n                                (v: { variable: string; value: string }) =>\n                                  `${v?.variable || ''}=\"${v?.value || ''}\"`,\n                              ).join('\\n')}\n                            </SyntaxHighlighter>\n                          ) : (\n                            '-'\n                          )}\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                    <Card\n                      title={t('session.launcher.ResourceAllocation')}\n                      size=\"small\"\n                      extra={\n                        <Button\n                          type=\"link\"\n                          onClick={() => {\n                            setCurrentStep(\n                              // @ts-ignore\n                              steps.findIndex((v) => v.key === 'environment'),\n                            );\n                          }}\n                        >\n                          {t('button.Edit')}\n                        </Button>\n                      }\n                    >\n                      <Descriptions>\n                        <Descriptions.Item\n                          span={24}\n                          label={t('environment.ResourcePresets')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            align=\"start\"\n                            gap={'xs'}\n                            wrap=\"wrap\"\n                            style={{ flex: 1 }}\n                          >\n                            {form.getFieldValue('allocationPreset') ===\n                            'custom' ? (\n                              // t('session.launcher.CustomAllocation')\n                              ''\n                            ) : (\n                              <Tag>\n                                {form.getFieldValue('allocationPreset')}\n                              </Tag>\n                            )}\n\n                            {_.map(\n                              _.omit(form.getFieldValue('resource'), 'shmem'),\n                              (value, type) => {\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={\n                                      type === 'mem'\n                                        ? iSizeToSize(value + 'g', 'b').number +\n                                          ''\n                                        : value\n                                    }\n                                    opts={{\n                                      shmem: form.getFieldValue('resource')\n                                        .shmem\n                                        ? iSizeToSize(\n                                            form.getFieldValue('resource')\n                                              .shmem + 'g',\n                                            'b',\n                                          ).number\n                                        : undefined,\n                                    }}\n                                  />\n                                );\n                              },\n                            )}\n                            {/* {_.chain(\n                              form.getFieldValue('allocationPreset') ===\n                                'custom'\n                                ? form.getFieldValue('resource')\n                                : JSON.parse(\n                                    form.getFieldValue('selectedPreset')\n                                      ?.resource_slots || '{}',\n                                  ),\n                            )\n                              .map((value, type) => {\n                                // @ts-ignore\n                                if (resourceSlots[type] === undefined)\n                                  return undefined;\n                                const resource_opts = {\n                                  shmem:\n                                    form.getFieldValue('selectedPreset')\n                                      .shared_memory,\n                                };\n                                return (\n                                  <ResourceNumber\n                                    key={type}\n                                    // @ts-ignore\n                                    type={type}\n                                    value={value}\n                                    opts={resource_opts}\n                                  />\n                                );\n                              })\n                              .compact()\n                              .value()} */}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </Card>\n                    <BAICard\n                      title={t('webui.menu.Data&Storage')}\n                      size=\"small\"\n                      status={\n                        form.getFieldError('vfoldersAliasMap').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'storage'),\n                        );\n                      }}\n                    >\n                      {form.getFieldValue('mounts')?.length > 0 ? (\n                        <Table\n                          rowKey=\"name\"\n                          size=\"small\"\n                          pagination={false}\n                          columns={[\n                            {\n                              dataIndex: 'name',\n                              title: t('data.folders.Name'),\n                            },\n                            {\n                              dataIndex: 'alias',\n                              title: t('session.launcher.FolderAlias'),\n                              render: (value, record) => {\n                                return _.isEmpty(value) ? (\n                                  <Typography.Text\n                                    type=\"secondary\"\n                                    style={{\n                                      opacity: 0.7,\n                                    }}\n                                  >\n                                    {`/home/work/${record.name}`}\n                                  </Typography.Text>\n                                ) : (\n                                  value\n                                );\n                              },\n                            },\n                          ]}\n                          dataSource={_.map(\n                            form.getFieldValue('mounts'),\n                            (v) => {\n                              return {\n                                name: v,\n                                alias:\n                                  form.getFieldValue('vfoldersAliasMap')?.[v],\n                              };\n                            },\n                          )}\n                        ></Table>\n                      ) : (\n                        '-'\n                      )}\n                    </BAICard>\n                    <BAICard\n                      title=\"Network\"\n                      size=\"small\"\n                      status={\n                        form.getFieldError('ports').length > 0\n                          ? 'error'\n                          : undefined\n                      }\n                      extraButtonTitle={t('button.Edit')}\n                      onClickExtraButton={() => {\n                        setCurrentStep(\n                          // @ts-ignore\n                          steps.findIndex((v) => v.key === 'network'),\n                        );\n                      }}\n                    >\n                      <Descriptions size=\"small\">\n                        <Descriptions.Item\n                          label={t('session.launcher.PreOpenPortTitle')}\n                        >\n                          <Flex\n                            direction=\"row\"\n                            gap=\"xs\"\n                            style={{ flex: 1 }}\n                            wrap=\"wrap\"\n                          >\n                            {/* {form.getFieldValue('environments').image} */}\n                            {_.sortBy(form.getFieldValue('ports'), (v) =>\n                              parseInt(v),\n                            ).map((v) => (\n                              <PortTag value={v} style={{ margin: 0 }}>\n                                {v}\n                              </PortTag>\n                            ))}\n                            {form.getFieldValue('ports')?.length !== 0\n                              ? undefined\n                              : '-'}\n                          </Flex>\n                        </Descriptions.Item>\n                      </Descriptions>\n                    </BAICard>\n                  </>\n                )}\n\n                <Flex direction=\"row\" justify=\"between\">\n                  <Flex gap={'sm'}>\n                    {/* <Popconfirm\n                    title={t('session.CheckAgainDialog')}\n                    placement=\"topLeft\"\n                    okButtonProps={{\n                      danger: true,\n                    }}\n                    okText={t('button.Reset')}\n                    onConfirm={() => {\n                      // @ts-ignore\n                      form.resetFields({\n\n                      });\n                    }}\n                  >\n                    <Button ghost danger>\n                      {t('button.Reset')}\n                    </Button>\n                  </Popconfirm> */}\n                    {currentStep === steps.length - 1 && (\n                      <Button\n                        icon={<SaveOutlined />}\n                        onClick={() => {\n                          message.info(\n                            'Not implemented yet: Template edit modal',\n                          );\n                        }}\n                      >\n                        Save as a template\n                      </Button>\n                    )}\n                  </Flex>\n                  <Flex direction=\"row\" gap=\"sm\">\n                    {currentStep !== steps.length - 1 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(steps.length - 1);\n                        }}\n                      >\n                        Skip to Review\n                      </Button>\n                    )}\n                    {currentStep > 0 && (\n                      <Button\n                        onClick={() => {\n                          setCurrentStep(currentStep - 1);\n                        }}\n                        icon={<LeftOutlined />}\n                      >\n                        Previous\n                      </Button>\n                    )}\n                    {currentStep === steps.length - 1 ? (\n                      <Button\n                        type=\"primary\"\n                        icon={<PlayCircleOutlined />}\n                        disabled={hasError}\n                      >\n                        {t('session.launcher.Launch')}\n                      </Button>\n                    ) : (\n                      <Button\n                        type=\"primary\"\n                        ghost\n                        onClick={() => {\n                          setCurrentStep(currentStep + 1);\n                        }}\n                      >\n                        Next <RightOutlined />\n                      </Button>\n                    )}\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Form>\n          </Form.Provider>\n          {/* </Suspense> */}\n        </Flex>\n        {screens.md && (\n          <Affix\n            offsetTop={150}\n            // direction=\"column\"\n            style={{ zIndex: 2 }}\n          >\n            <Steps\n              size=\"small\"\n              direction=\"vertical\"\n              current={currentStep}\n              onChange={(nextCurrent) => {\n                setCurrentStep(nextCurrent);\n              }}\n              items={_.map(steps, (s, idx) => ({\n                ...s,\n                status: idx === currentStep ? 'process' : 'wait',\n              }))}\n            />\n          </Affix>\n        )}\n      </Flex>\n      {/* <FolderExplorer\n        folderName={selectedFolderName}\n        open={!!selectedFolderName}\n        onRequestClose={() => {\n          setSelectedFolderName(undefined);\n        }}\n      /> */}\n    </Flex>\n  );\n};\n\nconst SessionTypeItem: React.FC<{\n  title: string;\n  description?: string;\n}> = ({ title, description }) => {\n  const { token } = theme.useToken();\n  return (\n    <Flex\n      direction=\"column\"\n      style={{ padding: token.paddingXS }}\n      align=\"stretch\"\n    >\n      <Typography.Title level={5}>{title}</Typography.Title>\n      <Typography.Text\n        type=\"secondary\"\n        // @ts-ignore\n        style={{ textWrap: 'wrap' }}\n      >\n        {description}\n      </Typography.Text>\n    </Flex>\n  );\n};\n\n// interface StepContentProps extends FlexProps{\n\n// }\n// const StepContent: React.FC<{}> = () => {\n//   return <Flex>\n\n//   </Flex>\n// }\n\nexport default SessionLauncherPage;\n"],"names":["manipulateGraphQLQueryWithClientDirectives","query","variables","arguments","length","undefined","isCompatibleWith","ast","parse","newAst","visit","Field","enter","node","_node$directives","directives","find","directive","_directive$arguments","_directive$arguments2","_directive$arguments3","_directive$arguments4","directiveName","name","value","firstArgName","firstArgValue","arg","version","kind","leave","_node$selectionSet$se","selectionSet","selections","Directive","includes","usedVariables","Variable","VariableDefinition","variableDefinition","variable","print","RelayFeatureFlags","ENABLE_RELAY_RESOLVERS","fetchFn","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","_globalThis$backendai2","_globalThis$backendai3","transformedQuery","reqBody","reqInfo","result","wrap","_context","prev","next","globalThis","backendaiclient","Promise","resolve","document","addEventListener","onBackendAIConnected","removeEventListener","text","_globalThis$backendai","isManagerVersionCompatibleWith","newSignedRequest","_wrapWithPromise","catch","err","t0","sent","abrupt","stop","_x","_x2","apply","RelayEnvironment","Environment","network","Network","create","subscribeFn","store","Store","RecordSource","dayjs","weekday","localeData","localizedFormat","relativeTime","utc","timezone","WebComponentContext","React","ShadowRootContext","useShadowRoot","useWebComponentInfo","queryClient","QueryClient","defaultOptions","queries","suspense","refetchOnWindowFocus","retry","i18n","initReactI18next","use","Backend","init","backend","loadPath","lng","backendaioptions","get","fallbackLng","interpolation","escapeValue","react","transSupportBasicHtmlNodes","transKeepBasicHtmlNodesFor","RoutingEventHandler","navigate","useNavigate","useLayoutEffect","handleNavigate","e","detail","replace","children","styles","shadowRoot","dispatchEvent","cache","useMemo","createCache","_useCurrentLanguage","_useState","useState","_useState2","_slicedToArray","lang","_setLang","useTranslation","useEffect","setTimeout","changeLanguage","handler","_e$detail","_e$detail2","window","useCurrentLanguage","themeConfig","useCustomThemeConfig","componentValues","moveTo","path","params","_jsx","_Fragment","RelayEnvironmentProvider","environment","_jsxs","QueryClientProvider","client","Provider","ConfigProvider","getPopupContainer","triggerNode","parentNode","locale","ko_KR","en_US","theme","App","StyleProvider","container","Suspense","fallback","BrowserRouter","QueryParamProvider","adapter","ReactRouter6Adapter","options","ACCELERATOR_UNIT_MAP","MWCIconWrap","_ref2","_ref2$size","size","style","concat","width","height","ResourceTypeIcon","_ref3","_resourceTypeIconSrcM","_resourceTypeIconSrcM2","_resourceTypeIconSrcM3","type","_ref3$size","_ref3$showTooltip","showIcon","showUnit","showTooltip","props","_objectWithoutProperties","_excluded","t","resourceTypeIconSrcMap","cpu","mem","Tooltip","title","_objectSpread","src","alt","amount","extra","opts","token","useToken","units","Flex","direction","gap","Typography","Text","iSizeToSize","numberFixed","parseFloat","toFixed","shmem","fontSize","fontSizeSM","v0","hash","_ref$status","status","extraButtonTitle","onClickExtraButton","cardProps","_extra","Button","icon","ExclamationCircleTwoTone","twoToneColor","colorError","onClick","Card","_","borderColor","colorWarning","colorSuccess","onChange","pickerProps","DatePicker","dateString","toISOString","formItemProps","inputRef","useRef","Form","List","fields","add","remove","align","map","index","key","restField","_excluded2","Item","marginBottom","flex","rules","required","message","pattern","_ref4","getFieldValue","validator","rule","variableName","variableNames","i","reject","Input","ref","placeholder","MinusCircleOutlined","noStyle","current","focus","PlusOutlined","block","PortTag","tagProps","port","parseInt","isValid","Tag","color","Object","assign","_objectDestructuringEmpty","label","tooltip","Trans","i18nKey","values","v","Error","Select","mode","tagRender","closable","onClose","onMouseDown","preventDefault","stopPropagation","suffixIcon","open","tokenSeparators","selectProps","_useUpdatableState","useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","updateFetchKeyThrottled","useThrottleFn","wait","trailing","leading","run","_useTransition","useTransition","_useTransition2","isPendingUpdate","_startTransition","resource_presets","useLazyLoadQuery","_ResourcePresetSelectQuery","require","fetchPolicy","loading","display","EditOutlined","preset","showSearch","onDropdownVisibleChange","console","log","form","useFormInstance","_useResourceSlots","useResourceSlots","resourceSlots","marginXS","ResourcePresetSelect","_options$preset","_options$preset2","slots","JSON","resource_slots","setFieldsValue","resource","number","shared_memory","margin","shouldUpdate","cur","allocationPreset","SliderInputItem","initialValue","inputNumberProps","addonAfter","max","step","omit","unit","accelerators","endsWith","Option","filter","_ref$showAliasInput","showAliasInput","_ref$selectedRowKeys","selectedRowKeys","controlledSelectedRowKeys","onChangeSelectedRowKeys","_ref$aliasBasePath","aliasBasePath","controlledAliasMap","aliasMap","onChangeAliasMap","_ref$rowKey","rowKey","tableProps","getRowKey","record","_useControllableValue","useControllableValue","defaultValue","_useControllableValue2","setSelectedRowKeys","_useControllableValue3","_useControllableValue4","setAliasMap","_Form$useForm","useForm","internalForm","startsWith","slice","validateFields","baiRequestWithPromise","useBaiSignedRequestWithPromise","currentProject","useCurrentProjectValue","isPendingRefetch","startRefetchTransition","allFolderList","useTanQuery","queryKey","queryFn","method","url","id","staleTime","data","searchKey","setSearchKey","displayingFolders","vf","handleAliasUpdate","then","finally","getFieldsValue","k","mapAliasToPath","input","columns","fontWeight","zIndex","QuestionCircleOutlined","dataIndex","sorter","a","b","localeCompare","render","isCurrentRowSelected","TextHighlighter","keyword","allAliasPathMap","reduce","_validator","allowClear","fixed","usage_mode","UserOutlined","group_name","permission","row","tagValues","r","w","d","perm","vFolder","hasPermission","toUpperCase","compact","DoubleTag","created_at","format","justify","target","ReloadOutlined","Table","scroll","x","rowSelection","showSorterTooltip","dataSource","onRow","rowIndex","event","_target$classList","classList","contains","_toConsumableArray","useWatch","hidden","arr","valuePropName","trigger","VFolderTable","setFieldValue","pagination","INITIAL_FORM_VALUES","sessionType","stepParam","withDefault","NumberParam","formValuesParam","JsonParam","SessionTypeItem","description","padding","paddingXS","Title","level","textWrap","_steps$currentStep","_form$getFieldValue2","_form$getFieldValue3","_form$getFieldValue4","_form$getFieldValue5","_form$getFieldValue7","_useQueryParams","useQueryParams","formValues","redirectTo","StringParam","_useQueryParams2","_useQueryParams2$","currentStep","initialFormValues","setQuery","syncFormToURLWithDebounce","useDebounceFn","setCurrentStep","nextStep","screens","Grid","useBreakpoint","stringify","steps","PlayCircleFilled","currentStepKey","hasError","getFieldsError","item","errors","paddingSM","justifyContent","Breadcrumb","items","href","maxWidth","marginTop","BlockOutlined","onFormChange","info","layout","requiredMark","Segmented","toString","TextArea","Checkbox","_prev$batch","_next$batch","batch","enabled","_form$getFieldValue","disabled","DatePickerISO","showTime","ErrorBoundary","fallbackRender","ImageEnvironmentSelectFormItems","EnvVarFormList","validateTrigger","ResourceGroupSelect","autoSelectDefault","ResourceAllocationFormItems","VFolderTableFromItem","PortSelectFormItem","BAICard","getFieldError","findIndex","Descriptions","span","idx","column","ImageMetaIcon","image","copyable","code","SyntaxHighlighter","darcula","codeTagProps","customStyle","join","ResourceNumber","opacity","_form$getFieldValue6","alias","SaveOutlined","LeftOutlined","PlayCircleOutlined","ghost","RightOutlined","md","Affix","offsetTop","Steps","nextCurrent","s"],"sourceRoot":""}