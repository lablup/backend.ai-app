{"version":3,"file":"static/js/230.c7bdea2b.chunk.js","mappings":"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","sources":["../node_modules/@ant-design/icons-svg/es/asn/WarningTwoTone.js","../node_modules/@ant-design/icons/es/icons/WarningTwoTone.js","components/ResetPasswordRequired.tsx","components/UserProfileSettingModal.tsx","components/__generated__/UserProfileSettingModalQuery.graphql.ts","hooks/backendai.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar WarningTwoTone = { \"icon\": function render(primaryColor, secondaryColor) { return { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zm-783.5-27.9L512 239.9l339.8 588.2H172.2z\", \"fill\": primaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M172.2 828.1h679.6L512 239.9 172.2 828.1zM560 720a48.01 48.01 0 01-96 0 48.01 48.01 0 0196 0zm-16-304v184c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V416c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M464 720a48 48 0 1096 0 48 48 0 10-96 0zm16-304v184c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V416c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8z\", \"fill\": primaryColor } }] }; }, \"name\": \"warning\", \"theme\": \"twotone\" };\nexport default WarningTwoTone;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport WarningTwoToneSvg from \"@ant-design/icons-svg/es/asn/WarningTwoTone\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar WarningTwoTone = function WarningTwoTone(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: WarningTwoToneSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  WarningTwoTone.displayName = 'WarningTwoTone';\n}\nexport default /*#__PURE__*/React.forwardRef(WarningTwoTone);","import { baiSignedRequestWithPromise } from '../helper';\nimport { useAnonymousBackendaiClient } from '../hooks';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport { useWebComponentInfo } from './DefaultProviders';\nimport Flex from './Flex';\nimport { WarningTwoTone } from '@ant-design/icons';\nimport { Button, Form, Modal, Typography, Input, theme } from 'antd';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\n// src/components/backend-ai-common-utils.ts\nexport const passwordPattern = /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[_\\W]).{8,}$/;\n\nconst ResetPasswordRequired = () => {\n  const { value, dispatchEvent } = useWebComponentInfo();\n  let parsedValue: {\n    open: boolean;\n    currentPassword: string;\n    username: string;\n    api_endpoint: string;\n  };\n  try {\n    parsedValue = JSON.parse(value || '');\n  } catch (error) {\n    parsedValue = {\n      open: false,\n      currentPassword: '',\n      username: '',\n      api_endpoint: '',\n    };\n  }\n  const { open, currentPassword, username, api_endpoint } = parsedValue;\n\n  const { token } = theme.useToken();\n  const [form] = Form.useForm<{\n    newPassword: string;\n    confirm: string;\n  }>();\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (open) {\n      form.resetFields();\n    }\n  }, [open, form]);\n\n  const anonymousBaiClient = useAnonymousBackendaiClient({ api_endpoint });\n\n  const mutation = useTanMutation({\n    mutationFn: (body: {\n      username: string;\n      current_password: string;\n      new_password: string;\n    }) => {\n      return baiSignedRequestWithPromise({\n        method: 'POST',\n        url: '/server/update-password-no-auth',\n        body,\n        client: anonymousBaiClient,\n      });\n    },\n  });\n\n  const onSubmit = () => {\n    form.validateFields().then((values) => {\n      mutation.mutate(\n        {\n          username: username,\n          current_password: currentPassword,\n          new_password: values.newPassword,\n        },\n        {\n          onSuccess(data, variables, context) {\n            dispatchEvent('ok', null);\n          },\n          onError(error, variables, context) {},\n        },\n      );\n    });\n  };\n\n  return (\n    <Modal\n      open={open}\n      centered\n      mask={false}\n      onCancel={() => {\n        dispatchEvent('cancel', null);\n      }}\n      keyboard={false}\n      maskClosable={false}\n      footer={null}\n      width={450}\n      destroyOnClose={true}\n      forceRender\n    >\n      <Flex\n        direction=\"column\"\n        justify=\"start\"\n        align=\"stretch\"\n        gap={'md'}\n        style={{\n          alignSelf: 'stretch',\n          paddingTop: token.paddingMD,\n          paddingBottom: token.paddingMD,\n        }}\n      >\n        <Typography.Title level={3} style={{ margin: 0 }}>\n          <WarningTwoTone twoToneColor={token.colorWarning} />{' '}\n          {t('webui.menu.PleaseChangeYourPassword')}\n        </Typography.Title>\n        {t('webui.menu.YouMushChangeYourPassword')}\n        <Form\n          form={form}\n          layout=\"vertical\"\n          initialValues={{\n            currentPassword: currentPassword,\n          }}\n          disabled={mutation.isLoading}\n        >\n          <Form.Item\n            name=\"newPassword\"\n            label={t('webui.menu.NewPassword')}\n            rules={[\n              {\n                required: true,\n              },\n              {\n                pattern: passwordPattern,\n                message: t('webui.menu.InvalidPasswordMessage').toString(),\n              },\n              () => ({\n                validator(_, value) {\n                  if (currentPassword === value) {\n                    return Promise.reject(\n                      new Error(\n                        t('webui.menu.NewPasswordCannotBeSame').toString(),\n                      ),\n                    );\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n            hasFeedback\n          >\n            <Input.Password />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirm\"\n            label={t('webui.menu.NewPasswordAgain')}\n            dependencies={['newPassword']}\n            hasFeedback\n            rules={[\n              {\n                required: true,\n              },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('newPassword') === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(\n                    new Error(t('environment.PasswordsDoNotMatch').toString()),\n                  );\n                },\n              }),\n            ]}\n          >\n            <Input.Password onPressEnter={onSubmit} />\n          </Form.Item>\n        </Form>\n        <Button type=\"primary\" onClick={onSubmit} loading={mutation.isLoading}>\n          {t('webui.menu.Update')}\n        </Button>\n      </Flex>\n    </Modal>\n  );\n};\n\nexport default ResetPasswordRequired;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '../hooks';\nimport { useCurrentUserInfo } from '../hooks/backendai';\nimport { useTanQuery, useTanMutation } from '../hooks/reactQueryAlias';\nimport BAIModal from './BAIModal';\nimport { passwordPattern } from './ResetPasswordRequired';\nimport TOTPActivateModal from './TOTPActivateModal';\n// @ts-ignore\nimport customCSS from './UserProfileSettingModal.css?raw';\nimport { UserProfileSettingModalQuery } from './__generated__/UserProfileSettingModalQuery.graphql';\nimport { ExclamationCircleFilled } from '@ant-design/icons';\nimport { useToggle } from 'ahooks';\nimport { Modal, ModalProps, Input, Form, Select, message, Switch } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport _ from 'lodash';\nimport React, { useDeferredValue } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ninterface Props extends ModalProps {\n  onRequestClose: (success?: boolean) => void;\n}\n\ntype UserProfileFormValues = {\n  full_name: string;\n  originalPassword?: string;\n  newPasswordConfirm?: string;\n  newPassword?: string;\n  access_key?: string;\n  secret_key?: string;\n  totp_activated: boolean;\n};\n\nconst UserProfileSettingModal: React.FC<Props> = ({\n  onRequestClose,\n  ...baiModalProps\n}) => {\n  const { t } = useTranslation();\n  const [form] = Form.useForm<UserProfileFormValues>();\n  const [messageApi, contextHolder] = message.useMessage();\n  const [modal, modalContextHolder] = Modal.useModal();\n  const [isOpenTOTPActivateModal, { toggle: toggleTOTPActivateModal }] =\n    useToggle(false);\n  const baiClient = useSuspendedBackendaiClient();\n\n  const { data: isManagerSupportingTOTP } = useTanQuery(\n    'isManagerSupportingTOTP',\n    () => {\n      return baiClient.isManagerSupportingTOTP();\n    },\n    {\n      suspense: true,\n    },\n  );\n  const totpSupported = baiClient.supports('2FA') && isManagerSupportingTOTP;\n\n  const [userInfo, userMutations] = useCurrentUserInfo();\n  const [fetchKey, updateFetchKey] = useUpdatableState('initial-fetch');\n  const deferredMergedFetchKey = useDeferredValue(fetchKey);\n\n  const { user } = useLazyLoadQuery<UserProfileSettingModalQuery>(\n    graphql`\n      query UserProfileSettingModalQuery(\n        $email: String!\n        $isNotSupportTotp: Boolean!\n      ) {\n        user(email: $email) {\n          id\n          totp_activated @skipOnClient(if: $isNotSupportTotp)\n          ...TOTPActivateModalFragment\n        }\n      }\n    `,\n    {\n      email: userInfo.email,\n      isNotSupportTotp: !totpSupported,\n    },\n    {\n      fetchPolicy: 'network-only',\n      fetchKey: deferredMergedFetchKey,\n    },\n  );\n\n  const { data: keyPairs } = useTanQuery<\n    {\n      secret_key: string;\n      access_key: string;\n    }[]\n  >(\n    'baiClient.keypair.list',\n    () => {\n      return baiClient.keypair\n        .list(userInfo.email, ['access_key', 'secret_key'], true)\n        .then((res: any) => res.keypairs);\n    },\n    {\n      suspense: true,\n    },\n  );\n\n  const mutationToRemoveTotp = useTanMutation({\n    mutationFn: () => {\n      return baiClient.remove_totp();\n    },\n  });\n\n  const onSubmit = () => {\n    form.validateFields().then((values) => {\n      userMutations.updateFullName(values.full_name, {\n        onSuccess: (newFullName) => {\n          if (newFullName !== userInfo.full_name) {\n            messageApi.open({\n              type: 'success',\n              content: t('webui.menu.FullnameUpdated'),\n            });\n          }\n\n          if (\n            values.newPassword &&\n            values.newPasswordConfirm &&\n            values.originalPassword\n          ) {\n            userMutations.updatePassword(\n              {\n                new_password: values.newPassword,\n                new_password2: values.newPasswordConfirm,\n                old_password: values.originalPassword,\n              },\n              {\n                onSuccess: () => {\n                  messageApi.open({\n                    type: 'success',\n                    content: t('webui.menu.PasswordUpdated'),\n                  });\n                  onRequestClose(true);\n                },\n                onError: (e) => {\n                  messageApi.open({\n                    type: 'error',\n                    content: e.message,\n                  });\n                },\n              },\n            );\n          } else {\n            onRequestClose(true);\n          }\n        },\n        onError: (e) => {\n          messageApi.open({\n            type: 'error',\n            content: e.message,\n          });\n        },\n      });\n    });\n  };\n\n  return (\n    <>\n      <style>{customCSS}</style>\n      <BAIModal\n        {...baiModalProps}\n        okText={t('webui.menu.Update')}\n        cancelText={t('webui.menu.Cancel')}\n        onCancel={() => {\n          onRequestClose();\n        }}\n        confirmLoading={userInfo.isPendingMutation}\n        onOk={() => onSubmit()}\n        centered\n        destroyOnClose\n        title={t('webui.menu.MyAccountInformation')}\n      >\n        <Form\n          layout=\"horizontal\"\n          labelCol={{ span: 8 }}\n          form={form}\n          initialValues={{\n            full_name: userInfo.full_name,\n            totp_activated: user?.totp_activated || false,\n            access_key: keyPairs?.[0].access_key,\n          }}\n          preserve={false}\n        >\n          <Form.Item\n            name=\"full_name\"\n            label={t('webui.menu.FullName')}\n            rules={[\n              () => ({\n                validator(_, value) {\n                  if (value && value.length < 65) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(\n                    new Error(t('webui.menu.FullNameInvalid')),\n                  );\n                },\n              }),\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item name=\"access_key\" label={t('general.AccessKey')}>\n            <Select\n              options={_.map(keyPairs, (keyPair) => ({\n                value: keyPair.access_key,\n              }))}\n              // onSelect={onSelectAccessKey}\n            ></Select>\n          </Form.Item>\n          <Form.Item\n            label={t('general.SecretKey')}\n            shouldUpdate={(prev, next) => prev.access_key !== next.access_key}\n          >\n            {({ getFieldValue }) => (\n              <Input.Password\n                value={\n                  _.find(keyPairs, ['access_key', getFieldValue('access_key')])\n                    ?.secret_key\n                }\n                className=\"disabled_style_readonly\"\n                readOnly\n              />\n            )}\n          </Form.Item>\n          <Form.Item\n            name=\"originalPassword\"\n            label={t('webui.menu.OriginalPassword')}\n            rules={[\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (\n                    !value &&\n                    (getFieldValue('newPassword') ||\n                      getFieldValue('newPasswordConfirm'))\n                  ) {\n                    return Promise.reject(\n                      new Error(t('webui.menu.InputOriginalPassword')),\n                    );\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n            dependencies={['newPassword', 'newPasswordConfirm']}\n          >\n            <Input.Password />\n          </Form.Item>\n          <Form.Item\n            name=\"newPassword\"\n            label={t('webui.menu.NewPassword')}\n            rules={[\n              {\n                pattern: passwordPattern,\n                message: t('webui.menu.InvalidPasswordMessage'),\n              },\n            ]}\n          >\n            <Input.Password />\n          </Form.Item>\n          <Form.Item\n            name=\"newPasswordConfirm\"\n            label={t('webui.menu.NewPasswordAgain')}\n            dependencies={['newPassword']}\n            rules={[\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('newPassword') === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(\n                    new Error(t('webui.menu.NewPasswordMismatch')),\n                  );\n                },\n              }),\n            ]}\n          >\n            <Input.Password />\n          </Form.Item>\n          {!!totpSupported && (\n            <Form.Item\n              name=\"totp_activated\"\n              label={t('webui.menu.TotpActivated')}\n              valuePropName=\"checked\"\n            >\n              <Switch\n                onChange={(checked: boolean) => {\n                  if (checked) {\n                    toggleTOTPActivateModal();\n                  } else {\n                    if (user?.totp_activated) {\n                      form.setFieldValue('totp_activated', true);\n                      modal.confirm({\n                        title: t('totp.TurnOffTotp'),\n                        icon: <ExclamationCircleFilled />,\n                        content: t('totp.ConfirmTotpRemovalBody'),\n                        okText: t('button.Yes'),\n                        okType: 'danger',\n                        cancelText: t('button.No'),\n                        onOk() {\n                          mutationToRemoveTotp.mutate(undefined, {\n                            onSuccess: () => {\n                              message.success(\n                                t('totp.RemoveTotpSetupCompleted'),\n                              );\n                              updateFetchKey();\n                              form.setFieldValue('totp_activated', false);\n                            },\n                            onError: (error: any) => {\n                              message.error(error.message);\n                            },\n                          });\n                        },\n                        onCancel() {\n                          form.setFieldValue('totp_activated', true);\n                        },\n                      });\n                    }\n                  }\n                }}\n              />\n            </Form.Item>\n          )}\n        </Form>\n        {!!totpSupported && (\n          <TOTPActivateModal\n            userFrgmt={user}\n            open={isOpenTOTPActivateModal}\n            onRequestClose={(success) => {\n              if (success) {\n                updateFetchKey();\n              } else {\n                form.setFieldValue('totp_activated', false);\n              }\n              toggleTOTPActivateModal();\n            }}\n          />\n        )}\n      </BAIModal>\n      {contextHolder}\n      {modalContextHolder}\n    </>\n  );\n};\n\nexport default UserProfileSettingModal;\n","/**\n * @generated SignedSource<<2c0e08c01e860fb4e78a264e42a1eeb1>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nimport { FragmentRefs } from \"relay-runtime\";\nexport type UserProfileSettingModalQuery$variables = {\n  email: string;\n  isNotSupportTotp: boolean;\n};\nexport type UserProfileSettingModalQuery$data = {\n  readonly user: {\n    readonly id: string | null;\n    readonly totp_activated: boolean | null;\n    readonly \" $fragmentSpreads\": FragmentRefs<\"TOTPActivateModalFragment\">;\n  } | null;\n};\nexport type UserProfileSettingModalQuery = {\n  response: UserProfileSettingModalQuery$data;\n  variables: UserProfileSettingModalQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  },\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"isNotSupportTotp\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"id\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"totp_activated\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"UserProfileSettingModalQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          {\n            \"args\": null,\n            \"kind\": \"FragmentSpread\",\n            \"name\": \"TOTPActivateModalFragment\"\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"UserProfileSettingModalQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"email\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"b0c9773ff4a3e759f0f9822463daa757\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"UserProfileSettingModalQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query UserProfileSettingModalQuery(\\n  $email: String!\\n  $isNotSupportTotp: Boolean!\\n) {\\n  user(email: $email) {\\n    id\\n    totp_activated @skipOnClient(if: $isNotSupportTotp)\\n    ...TOTPActivateModalFragment\\n  }\\n}\\n\\nfragment TOTPActivateModalFragment on User {\\n  email\\n  totp_activated @skipOnClient(if: $isNotSupportTotp)\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"c87e74dfaa01d51a1697e67df81e101b\";\n\nexport default node;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { maskString } from '../helper';\nimport { useTanMutation, useTanQuery } from './reactQueryAlias';\nimport _ from 'lodash';\nimport { useEffect, useState } from 'react';\n\nexport interface QuotaScope {\n  id: string;\n  quota_scope_id: string;\n  storage_host_name: string;\n  details: {\n    hard_limit_bytes: number | null;\n    usage_bytes: number | null;\n    usage_count: number | null;\n  };\n}\n\nexport const useResourceSlots = () => {\n  const [key, checkUpdate] = useUpdatableState('first');\n  // const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const baiClient = useSuspendedBackendaiClient();\n  const { data: resourceSlots } = useTanQuery<{\n    cpu?: string;\n    mem?: string;\n    'cuda.shares'?: string;\n    'cuda.device'?: string;\n  }>({\n    queryKey: ['useResourceSlots', key],\n    queryFn: () => {\n      return baiClient.get_resource_slots();\n    },\n    staleTime: 0,\n  });\n  return [\n    resourceSlots,\n    {\n      refresh: () => checkUpdate(),\n    },\n  ] as const;\n};\n\ninterface UserInfo {\n  full_name: string;\n  email: string;\n}\n\ntype mutationOptions<T> = {\n  onSuccess?: (value: T) => void;\n  onError?: (error: any) => void;\n};\n\nexport const useCurrentUserInfo = () => {\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [userInfo, _setUserInfo] = useState<UserInfo>({\n    full_name: baiClient.full_name,\n    email: baiClient.email,\n  });\n\n  const getUsername = () => {\n    let name: string =\n      _.trim(userInfo.full_name).length > 0\n        ? userInfo.full_name\n        : userInfo.email;\n    // mask username only when the configuration is enabled\n    if (baiClient._config.maskUserInfo) {\n      const maskStartIdx = 2;\n      const emailPattern =\n        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n      const isEmail: boolean = emailPattern.test(name);\n      const maskLength = isEmail\n        ? name.split('@')[0].length - maskStartIdx\n        : name.length - maskStartIdx;\n      name = maskString(name, '*', maskStartIdx, maskLength);\n    }\n    return name;\n  };\n\n  useEffect(() => {\n    const handler = (e: any) => {\n      if (baiClient.supports('change-user-name')) {\n        const input = e.detail;\n        _setUserInfo((v) => ({\n          ...v,\n          full_name: input,\n        }));\n      }\n    };\n    document.addEventListener('current-user-info-changed', handler);\n    return () => {\n      document.removeEventListener('current-user-info-changed', handler);\n    };\n  }, [baiClient]);\n\n  const mutationToUpdateUserFullName = useTanMutation({\n    mutationFn: (values: { email: string; full_name: string }) => {\n      return baiClient.update_full_name(values.email, values.full_name);\n    },\n  });\n  const mutationToUpdateUserPassword = useTanMutation({\n    mutationFn: (values: {\n      old_password: string;\n      new_password: string;\n      new_password2: string;\n    }) => {\n      return baiClient.update_password(\n        values.old_password,\n        values.new_password,\n        values.new_password2,\n      );\n    },\n  });\n\n  return [\n    {\n      ...userInfo,\n      username: getUsername(),\n      isPendingMutation:\n        mutationToUpdateUserFullName.isLoading ||\n        mutationToUpdateUserPassword.isLoading,\n    },\n    {\n      updateFullName: (\n        newFullName: string,\n        options?: mutationOptions<string>,\n      ) => {\n        mutationToUpdateUserFullName.mutate(\n          {\n            full_name: newFullName,\n            email: baiClient.email,\n          },\n          {\n            onSuccess: () => {\n              options?.onSuccess && options.onSuccess(newFullName);\n              document.dispatchEvent(\n                new CustomEvent('current-user-info-changed', {\n                  detail: newFullName,\n                }),\n              );\n              _setUserInfo((v) => ({\n                ...v,\n                full_name: newFullName,\n              }));\n            },\n            onError: (error: any) => {\n              options?.onError && options.onError(error);\n            },\n          },\n        );\n      },\n      updatePassword: (\n        params: {\n          old_password: string;\n          new_password: string;\n          new_password2: string;\n        },\n        options?: mutationOptions<undefined>,\n      ) => {\n        mutationToUpdateUserPassword.mutate(params, {\n          onSuccess: () => {\n            options?.onSuccess && options.onSuccess(undefined);\n          },\n          onError: (error: any) => {\n            options?.onError && options.onError(error);\n          },\n        });\n      },\n    },\n  ] as const;\n};\n"],"names":["primaryColor","secondaryColor","WarningTwoTone","props","ref","React","AntdIcon","_extends","icon","WarningTwoToneSvg","passwordPattern","parsedValue","_useWebComponentInfo","useWebComponentInfo","value","dispatchEvent","JSON","parse","error","open","currentPassword","username","api_endpoint","_parsedValue","token","theme","useToken","_Form$useForm","Form","useForm","form","_slicedToArray","t","useTranslation","useEffect","resetFields","anonymousBaiClient","useAnonymousBackendaiClient","mutation","useTanMutation","mutationFn","body","baiSignedRequestWithPromise","method","url","client","onSubmit","validateFields","then","values","mutate","current_password","new_password","newPassword","onSuccess","data","variables","context","onError","_jsx","Modal","centered","mask","onCancel","keyboard","maskClosable","footer","width","destroyOnClose","forceRender","children","_jsxs","Flex","direction","justify","align","gap","style","alignSelf","paddingTop","paddingMD","paddingBottom","Typography","Title","level","margin","twoToneColor","colorWarning","layout","initialValues","disabled","isLoading","Item","name","label","rules","required","pattern","message","toString","validator","_","Promise","reject","Error","resolve","hasFeedback","Input","Password","dependencies","_ref","getFieldValue","onPressEnter","Button","type","onClick","loading","onRequestClose","baiModalProps","_objectWithoutProperties","_excluded","_message$useMessage","useMessage","_message$useMessage2","messageApi","contextHolder","_Modal$useModal","useModal","_Modal$useModal2","modal","modalContextHolder","_useToggle","useToggle","_useToggle2","isOpenTOTPActivateModal","toggleTOTPActivateModal","toggle","baiClient","useSuspendedBackendaiClient","isManagerSupportingTOTP","useTanQuery","suspense","totpSupported","supports","_useCurrentUserInfo","useCurrentUserInfo","_useCurrentUserInfo2","userInfo","userMutations","_useUpdatableState","useUpdatableState","_useUpdatableState2","fetchKey","updateFetchKey","deferredMergedFetchKey","useDeferredValue","user","useLazyLoadQuery","_UserProfileSettingModalQuery","require","email","isNotSupportTotp","fetchPolicy","keyPairs","keypair","list","res","keypairs","mutationToRemoveTotp","remove_totp","_Fragment","BAIModal","_objectSpread","okText","cancelText","confirmLoading","isPendingMutation","onOk","updateFullName","full_name","newFullName","content","newPasswordConfirm","originalPassword","updatePassword","new_password2","old_password","e","title","labelCol","span","totp_activated","access_key","preserve","length","Select","options","keyPair","shouldUpdate","prev","next","_ref2","_$find","secret_key","className","readOnly","_ref3","_ref4","valuePropName","Switch","onChange","checked","setFieldValue","confirm","ExclamationCircleFilled","okType","undefined","success","TOTPActivateModal","userFrgmt","node","v0","v1","v2","v3","hash","useResourceSlots","key","checkUpdate","queryKey","queryFn","get_resource_slots","staleTime","refresh","_useState","useState","_useState2","_setUserInfo","handler","input","detail","v","document","addEventListener","removeEventListener","mutationToUpdateUserFullName","update_full_name","mutationToUpdateUserPassword","update_password","_config","maskUserInfo","maskLength","test","split","maskString","getUsername","CustomEvent","params"],"sourceRoot":""}